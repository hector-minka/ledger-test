"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createKeyPair = createKeyPair;
exports.encryptSecretKey = encryptSecretKey;
exports.decryptSecretKey = decryptSecretKey;
const crypto_1 = __importDefault(require("crypto"));
const ed25519 = __importStar(require("@noble/ed25519"));
const asn1_1 = require("../common/asn1");
const exchange_1 = require("../common/exchange");
/**
 * Webcrypto instance. Either in browser `global?.crypto`
 * or in node for testing purposes `crypto?.webcrypto`
 */
const webcrypto = global?.crypto ?? crypto_1.default?.webcrypto;
function assertWebcryptoSupport() {
    if (!webcrypto) {
        throw new Error('Unable to perform operation, `webcrypto` is not defined');
    }
    if (!webcrypto.subtle) {
        throw new Error('Unable to perform operation, `webcrypto.subtle` is not defined');
    }
}
async function createKeyPair() {
    // Cryptographic functions for ed25519 are not available in
    // browsers and that is why we use a JS implementation from
    // `@noble/ed25519`
    const privateKey = ed25519.utils.randomPrivateKey();
    const publicKey = await ed25519.getPublicKey(privateKey);
    return {
        format: 'ed25519-raw',
        public: Buffer.from(publicKey).toString('base64'),
        secret: Buffer.from(privateKey).toString('base64'),
    };
}
async function encryptSecretKey(secret, password) {
    // Cryptographic functions for exporting pkcs5 encrypted keys
    // are not available in browsers and that is why we use a JS
    // implementation from `Webcrypto`
    assertWebcryptoSupport();
    // We'll use fixed number of hash iterations for key derivation
    // as the same is used in native implementation
    const iterations = 2048;
    // Generate random salt for key derivation and IV for encryption
    const salt = webcrypto.getRandomValues(new Uint8Array(8));
    const iv = webcrypto.getRandomValues(new Uint8Array(16));
    const keyMaterial = await webcrypto.subtle.importKey('raw', Buffer.from(password, 'utf-8'), 'PBKDF2', false, ['deriveKey']);
    // Derive AES-CBC 256-bit encryption key from the given password
    // with random 8-byte salt
    const key = await webcrypto.subtle.deriveKey({
        name: 'PBKDF2',
        salt,
        iterations,
        hash: 'SHA-256',
    }, keyMaterial, { name: 'AES-CBC', length: 256 }, false, ['encrypt']);
    // Encrypt the secret with AES-CBC using 256-bit key derived above and
    // random 16-byte IV
    const secretHex = Buffer.from(secret, 'base64').toString('hex');
    const encrypted = await webcrypto.subtle.encrypt({ name: 'AES-CBC', iv }, key, 
    // Plaintext of secret is expected to be DER encoded with prefix
    // so we'll convert it to der.
    // See: https://datatracker.ietf.org/doc/html/rfc5208 section 6.
    Buffer.from((0, asn1_1.privateKeyEd25519RawToDer)(secretHex), 'hex'));
    // Result contains all parameters used in encryption so
    // it can be decrypted with same later
    const encryptedKey = {
        salt,
        iterations,
        iv,
        value: Buffer.from(encrypted),
    };
    // Convert the the result to pkcs5 DER format encoded in base64
    // See: https://www.rfc-editor.org/rfc/rfc2898
    return (0, exchange_1.exportEncryptedPrivateKey)(encryptedKey);
}
async function decryptSecretKey(secret, password) {
    // Cryptographic functions for exporting pkcs5 encrypted keys
    // are not available in browsers and that is why we use a JS
    // implementation from `Webcrypto`
    assertWebcryptoSupport();
    // Extract the parameters for decryption from pkcs5 DER format encoded in base64
    // See: https://www.rfc-editor.org/rfc/rfc2898
    const { salt, iterations, iv, value } = (0, exchange_1.importEncryptedPrivateKey)(secret);
    const keyMaterial = await webcrypto.subtle.importKey('raw', Buffer.from(password, 'utf-8'), 'PBKDF2', false, ['deriveKey']);
    // Derive AES-CBC 256-bit encryption key from the given password
    // with 8-byte salt extracted from encrypted payload
    const key = await webcrypto.subtle.deriveKey({
        name: 'PBKDF2',
        salt,
        iterations,
        hash: 'SHA-256',
    }, keyMaterial, { name: 'AES-CBC', length: 256 }, false, ['decrypt']);
    let decrypted;
    try {
        // Decrypt the secret with AES-CBC using 256-bit key derived above and
        // 16-byte IV extracted from encrypted payload
        decrypted = await webcrypto.subtle.decrypt({ name: 'AES-CBC', iv }, key, value);
    }
    catch (error) {
        // Error in the call above means that decryption failed
        throw new Error('Unable to decrypt secret key');
    }
    // When decrypted, the plaintext of secret is still DER encoded with prefix
    // so we'll convert it to raw
    // See: https://datatracker.ietf.org/doc/html/rfc5208 section 6.
    const rawKeyHex = (0, asn1_1.privateKeyEd25519DerToRaw)(Buffer.from(decrypted).toString('hex'));
    // Return the secret in raw format encoded in base64
    return Buffer.from(rawKeyHex, 'hex').toString('base64');
}
//# sourceMappingURL=keys.js.map