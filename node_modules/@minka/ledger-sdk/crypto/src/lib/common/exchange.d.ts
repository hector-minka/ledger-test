/**
 * Data structure containing all components of encrypted key.
 * These components are used in transport in order to be able
 * to decrypt the key given that only the password is required
 * for decryption.
 */
export type EncryptedPrivateKey = {
    salt: Uint8Array;
    iterations: number;
    iv: Uint8Array;
    value: Uint8Array;
};
/**
 * Data structure containing all components of encrypted string.
 * These components are used in transport in order to be able
 * to decrypt the string given that only the password is required
 * for decryption.
 */
export type EncryptedString = {
    salt: Uint8Array;
    iterations: number;
    iv: Uint8Array;
    value: Uint8Array;
};
/**
 * Exports encrypted key components to pkcs5 formatted string.
 *
 * @param key encrypted key components
 * @returns pkcs formatted string encoded as base64
 */
export declare function exportEncryptedPrivateKey(key: EncryptedPrivateKey): string;
/**
 * Imports encrypted key components from pkcs5 formatted string.
 *
 * @param key pkcs formatted string encoded as base64
 * @returns encrypted key components
 */
export declare function importEncryptedPrivateKey(key: string): EncryptedPrivateKey;
/**
 * Exports encrypted string components to a string.
 * @param encryptedUnpacked
 * @returns Encrypted string components encoded into a string.
 */
export declare function exportEncryptedString(encryptedUnpacked: EncryptedString): string;
/**
 * Imports encrypted string components from a string.
 * @param encryptedPacked
 * @returns Encrypted string components.
 */
export declare function importEncryptedString(encryptedPacked: string): EncryptedString;
