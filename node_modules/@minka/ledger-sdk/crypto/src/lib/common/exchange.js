"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exportEncryptedPrivateKey = exportEncryptedPrivateKey;
exports.importEncryptedPrivateKey = importEncryptedPrivateKey;
exports.exportEncryptedString = exportEncryptedString;
exports.importEncryptedString = importEncryptedString;
const asn1_1 = require("../common/asn1");
/**
 * Exports encrypted key components to pkcs5 formatted string.
 *
 * @param key encrypted key components
 * @returns pkcs formatted string encoded as base64
 */
function exportEncryptedPrivateKey(key) {
    // Iterations number is unsigned int written in 2 bytes, Big-endian
    const iterationsBuffer = Buffer.alloc(2);
    iterationsBuffer.writeUInt16BE(key.iterations);
    const buffer = Buffer.concat([
        Buffer.from(asn1_1.ASN1_PKCS5_SALT_PREFIX, 'hex'),
        key.salt,
        Buffer.from(asn1_1.ASN1_PKCS5_ITERATIONS_PREFIX, 'hex'),
        iterationsBuffer,
        Buffer.from(asn1_1.ASN1_PKCS5_IV_PREFIX, 'hex'),
        key.iv,
        Buffer.from(asn1_1.ASN1_PKCS5_VALUE_PREFIX, 'hex'),
        key.value,
    ]);
    return buffer.toString('base64');
}
/**
 * Imports encrypted key components from pkcs5 formatted string.
 *
 * @param key pkcs formatted string encoded as base64
 * @returns encrypted key components
 */
function importEncryptedPrivateKey(key) {
    const payloadAsn1Hex = Buffer.from(key, 'base64').toString('hex');
    const { salt, iterations, iv, value } = (0, asn1_1.parsePkcs5EncryptedKey)(payloadAsn1Hex);
    return {
        salt: Buffer.from(salt, 'hex'),
        // Iterations number is unsigned int written in 2 bytes, Big-endian
        iterations: Buffer.from(iterations, 'hex').readUInt16BE(),
        iv: Buffer.from(iv, 'hex'),
        value: Buffer.from(value, 'hex'),
    };
}
/**
 * Converts base64 encoded Uint8Array to base64 string.
 * @param array
 * @returns
 */
function uint8ArrayToBase64(array) {
    return Buffer.from(array).toString('base64');
}
/**
 * Converts base64 string to Uint8Array.
 * @param base64
 * @returns
 */
function base64ToUint8Array(base64) {
    return new Uint8Array(Buffer.from(base64, 'base64'));
}
/**
 * Exports encrypted string components to a string.
 * @param encryptedUnpacked
 * @returns Encrypted string components encoded into a string.
 */
function exportEncryptedString(encryptedUnpacked) {
    return JSON.stringify({
        salt: uint8ArrayToBase64(encryptedUnpacked.salt),
        iterations: encryptedUnpacked.iterations,
        iv: uint8ArrayToBase64(encryptedUnpacked.iv),
        value: uint8ArrayToBase64(encryptedUnpacked.value),
    });
}
/**
 * Imports encrypted string components from a string.
 * @param encryptedPacked
 * @returns Encrypted string components.
 */
function importEncryptedString(encryptedPacked) {
    const parsed = JSON.parse(encryptedPacked);
    return {
        salt: base64ToUint8Array(parsed.salt),
        iterations: parsed.iterations,
        iv: base64ToUint8Array(parsed.iv),
        value: base64ToUint8Array(parsed.value),
    };
}
//# sourceMappingURL=exchange.js.map