"use strict";
/**
 * This file contains functions for importing and exporting node's native
 * `ed25519` crypto keys in `der` format used to sign and verify ledger
 * records when executing in node environment.
 * In ledger transport we use raw keys without prefixes encoded in
 * base64, 44 characters in length.
 * Native `der` keys created with `crypto` library are prefixed with an ASN.1
 * hex prefixes when exported or imported:
 * - public key: `302a300506032b6570032100`
 * - private key: `302e020100300506032b657004220420`
 * So we need to strip this prefix when we export `der` key to raw key,
 * or prepend when we import `der` key from raw key.
 * see: https://datatracker.ietf.org/doc/html/rfc8410 (sections 9 and 10)
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.exportPublicKey = exportPublicKey;
exports.exportPrivateKey = exportPrivateKey;
exports.importPublicKey = importPublicKey;
exports.importPrivateKey = importPrivateKey;
const crypto_1 = require("crypto");
const asn1_1 = require("../common/asn1");
const publicKeyParser = {
    'ed25519-raw': asn1_1.publicKeyEd25519RawToDer,
    'rsa-der': (keyHex) => keyHex,
};
/**
 * Exports public `der` key to raw key format
 * @param key public key in `der`format
 * @returns public key in raw format
 */
function exportPublicKey(key) {
    if (key.type !== 'public') {
        throw new Error(`Unexpected key type '${key.type}', expected 'public'`);
    }
    const keyAsn1Hex = key.export({ format: 'der', type: 'spki' }).toString('hex');
    return Buffer.from((0, asn1_1.publicKeyEd25519DerToRaw)(keyAsn1Hex), 'hex').toString('base64');
}
/**
 * Exports private `der` key to raw key format
 * @param key private key in `der` format
 * @returns private key in raw format
 */
function exportPrivateKey(key) {
    if (key.type !== 'private') {
        throw new Error(`Unexpected key type '${key.type}', expected 'private'`);
    }
    const keyAsn1Hex = key
        .export({ format: 'der', type: 'pkcs8' })
        .toString('hex');
    return Buffer.from((0, asn1_1.privateKeyEd25519DerToRaw)(keyAsn1Hex), 'hex').toString('base64');
}
/**
 * Imports public `der` key from raw key format
 * @param key public key in raw format
 * @returns public key in `der` format
 */
function importPublicKey(key, format = 'ed25519-raw') {
    const keyHex = Buffer.from(key, 'base64').toString('hex');
    return (0, crypto_1.createPublicKey)({
        format: 'der',
        type: 'spki',
        key: Buffer.from(publicKeyParser[format](keyHex), 'hex'),
    });
}
/**
 * Imports private `der` key from raw key format
 * @param key private key in raw format
 * @returns private key in `der` format
 */
function importPrivateKey(key) {
    const keyHex = Buffer.from(key, 'base64').toString('hex');
    return (0, crypto_1.createPrivateKey)({
        format: 'der',
        type: 'pkcs8',
        key: Buffer.from((0, asn1_1.privateKeyEd25519RawToDer)(keyHex), 'hex'),
    });
}
//# sourceMappingURL=format.js.map