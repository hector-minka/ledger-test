import { LedgerKeyPair } from "../../../../types/src";
import { EncryptedString } from '../common/exchange';
export declare function createKeyPair(): Promise<LedgerKeyPair>;
export declare function encryptSecretKey(secret: string, password: string): Promise<string>;
export declare function decryptSecretKey(secret: string, password: string): Promise<string>;
/**
 * Encrypts a given string with a string password. There are no requirements for the format of either.
 * @param secret String to encrypt
 * @param password Password to encrypt with
 * @returns
 */
export declare function encryptWithPassword(valueToEncrypt: string, password: string): Promise<{
    unpacked: EncryptedString;
    packed: string;
}>;
/**
 * Decrypts a given encrypted string with a string password.
 * @param encrypted Components of encrypted string (see `EncryptedString`), or those same components encoded into a string (see `exportEncryptedString` and `importEncryptedString`).
 * @param password Password to decrypt with
 * @returns
 */
export declare function decryptWithPassword(encryptedValue: EncryptedString | string, password: string): Promise<string>;
/**
 * Generates a new rsa key pair.
 * @returns
 */
export declare function createRsaKeyPair(): Promise<{
    format: string;
    public: string;
    secret: string;
}>;
/**
 * Generates a new aes key.
 * @param keySize Size of the key in bytes
 * @returns Base64 encoded string representing the key
 */
export declare function createAesKey(keySize?: number): Promise<string>;
