"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createKeyPair = createKeyPair;
exports.encryptSecretKey = encryptSecretKey;
exports.decryptSecretKey = decryptSecretKey;
exports.encryptWithPassword = encryptWithPassword;
exports.decryptWithPassword = decryptWithPassword;
exports.createRsaKeyPair = createRsaKeyPair;
exports.createAesKey = createAesKey;
const crypto = __importStar(require("crypto"));
const util_1 = require("util");
const asn1_1 = require("../common/asn1");
const exchange_1 = require("../common/exchange");
const format_1 = require("./format");
const generateKeyPairAsync = crypto.generateKeyPair && (0, util_1.promisify)(crypto.generateKeyPair);
function assertCryptoSupport() {
    if (!crypto) {
        throw new Error('Unable to perform operation, `crypto` is not defined');
    }
    if (!crypto.subtle) {
        throw new Error('Unable to perform operation, `crypto.subtle` is not defined');
    }
    if (!generateKeyPairAsync) {
        throw new Error('Unable to perform operation, `crypto.generateKeyPair` is not defined');
    }
    if (!crypto.createPrivateKey) {
        throw new Error('Unable to perform operation, `crypto.createPrivateKey` is not defined');
    }
    if (!crypto.getRandomValues) {
        throw new Error('Unable to perform operation, `crypto.getRandomValues` is not defined');
    }
    if (!crypto.randomBytes) {
        throw new Error('Unable to perform operation, `crypto.randomBytes` is not defined');
    }
}
async function createKeyPair() {
    assertCryptoSupport();
    const keyPair = await generateKeyPairAsync('ed25519');
    return {
        format: 'ed25519-raw',
        public: (0, format_1.exportPublicKey)(keyPair.publicKey),
        secret: (0, format_1.exportPrivateKey)(keyPair.privateKey),
    };
}
async function encryptSecretKey(secret, password) {
    assertCryptoSupport();
    // We'll use fixed number of hash iterations for key derivation
    // as the same is used in native implementation
    const iterations = 2048;
    // Generate random salt for key derivation and IV for encryption
    const salt = crypto.getRandomValues(new Uint8Array(8));
    const iv = crypto.getRandomValues(new Uint8Array(16));
    const keyMaterial = await crypto.subtle.importKey('raw', Buffer.from(password, 'utf-8'), 'PBKDF2', false, ['deriveKey']);
    // Derive AES-CBC 256-bit encryption key from the given password
    // with random 8-byte salt
    const key = await crypto.subtle.deriveKey({
        name: 'PBKDF2',
        salt,
        iterations,
        hash: 'SHA-256',
    }, keyMaterial, { name: 'AES-CBC', length: 256 }, false, ['encrypt']);
    // Encrypt the secret with AES-CBC using 256-bit key derived above and
    // random 16-byte IV
    const secretHex = Buffer.from(secret, 'base64').toString('hex');
    const encrypted = await crypto.subtle.encrypt({ name: 'AES-CBC', iv }, key, 
    // Plaintext of secret is expected to be DER encoded with prefix
    // so we'll convert it to der.
    // See: https://datatracker.ietf.org/doc/html/rfc5208 section 6.
    Buffer.from((0, asn1_1.privateKeyEd25519RawToDer)(secretHex), 'hex'));
    // Result contains all parameters used in encryption so
    // it can be decrypted with same later
    const encryptedKey = {
        salt,
        iterations,
        iv,
        value: Buffer.from(encrypted),
    };
    // Convert the the result to pkcs5 DER format encoded in base64
    // See: https://www.rfc-editor.org/rfc/rfc2898
    return (0, exchange_1.exportEncryptedPrivateKey)(encryptedKey);
}
async function decryptSecretKey(secret, password) {
    assertCryptoSupport();
    // Extract the parameters for decryption from pkcs5 DER format encoded in base64
    // See: https://www.rfc-editor.org/rfc/rfc2898
    const { salt, iterations, iv, value } = (0, exchange_1.importEncryptedPrivateKey)(secret);
    const keyMaterial = await crypto.subtle.importKey('raw', Buffer.from(password, 'utf-8'), 'PBKDF2', false, ['deriveKey']);
    // Derive AES-CBC 256-bit encryption key from the given password
    // with 8-byte salt extracted from encrypted payload
    const key = await crypto.subtle.deriveKey({
        name: 'PBKDF2',
        salt,
        iterations,
        hash: 'SHA-256',
    }, keyMaterial, { name: 'AES-CBC', length: 256 }, false, ['decrypt']);
    let decrypted;
    try {
        // Decrypt the secret with AES-CBC using 256-bit key derived above and
        // 16-byte IV extracted from encrypted payload
        decrypted = await crypto.subtle.decrypt({ name: 'AES-CBC', iv }, key, value);
    }
    catch (error) {
        // Error in the call above means that decryption failed
        throw new Error('Unable to decrypt secret key');
    }
    // When decrypted, the plaintext of secret is still DER encoded with prefix
    // so we'll convert it to raw
    // See: https://datatracker.ietf.org/doc/html/rfc5208 section 6.
    const rawKeyHex = (0, asn1_1.privateKeyEd25519DerToRaw)(Buffer.from(decrypted).toString('hex'));
    // Return the secret in raw format encoded in base64
    return Buffer.from(rawKeyHex, 'hex').toString('base64');
}
/**
 * Encrypts a given string with a string password. There are no requirements for the format of either.
 * @param secret String to encrypt
 * @param password Password to encrypt with
 * @returns
 */
async function encryptWithPassword(valueToEncrypt, password) {
    assertCryptoSupport();
    // We'll use fixed number of hash iterations for key derivation
    // as the same is used in native implementation
    const iterations = 2048;
    // Generate random salt for key derivation and IV for encryption
    const salt = crypto.getRandomValues(new Uint8Array(8));
    const iv = crypto.getRandomValues(new Uint8Array(16));
    const keyMaterial = await crypto.subtle.importKey('raw', Buffer.from(password, 'utf-8'), 'PBKDF2', false, ['deriveKey']);
    // Derive AES-CBC 256-bit encryption key from the given password
    // with random 8-byte salt
    const key = await crypto.subtle.deriveKey({
        name: 'PBKDF2',
        salt,
        iterations,
        hash: 'SHA-256',
    }, keyMaterial, { name: 'AES-CBC', length: 256 }, false, ['encrypt']);
    // Encrypt valueToEncrypt with AES-CBC using 256-bit key derived above and
    // random 16-byte IV
    const encrypted = await crypto.subtle.encrypt({ name: 'AES-CBC', iv }, key, Buffer.from(valueToEncrypt, 'utf-8'));
    // Result contains all parameters used in encryption so
    // it can be decrypted with same later
    const encryptedPackage = {
        salt,
        iterations,
        iv,
        value: Buffer.from(encrypted),
    };
    return {
        unpacked: encryptedPackage,
        packed: (0, exchange_1.exportEncryptedString)(encryptedPackage),
    };
}
/**
 * Decrypts a given encrypted string with a string password.
 * @param encrypted Components of encrypted string (see `EncryptedString`), or those same components encoded into a string (see `exportEncryptedString` and `importEncryptedString`).
 * @param password Password to decrypt with
 * @returns
 */
async function decryptWithPassword(encryptedValue, password) {
    assertCryptoSupport();
    const unpackedEncryptedValue = typeof encryptedValue === 'string'
        ? (0, exchange_1.importEncryptedString)(encryptedValue)
        : encryptedValue;
    // Extract the parameters for decryption from pkcs5 DER format encoded in base64
    // See: https://www.rfc-editor.org/rfc/rfc2898
    const { salt, iterations, iv, value } = unpackedEncryptedValue;
    const keyMaterial = await crypto.subtle.importKey('raw', Buffer.from(password, 'utf-8'), 'PBKDF2', false, ['deriveKey']);
    // Derive AES-CBC 256-bit encryption key from the given password
    // with 8-byte salt extracted from encrypted payload
    const key = await crypto.subtle.deriveKey({
        name: 'PBKDF2',
        salt,
        iterations,
        hash: 'SHA-256',
    }, keyMaterial, { name: 'AES-CBC', length: 256 }, false, ['decrypt']);
    let decrypted;
    try {
        // Decrypt the secret with AES-CBC using 256-bit key derived above and
        // 16-byte IV extracted from encrypted payload
        decrypted = await crypto.subtle.decrypt({ name: 'AES-CBC', iv }, key, value);
    }
    catch (error) {
        // Error in the call above means that decryption failed
        throw new Error('Unable to decrypt encryptedSecret');
    }
    return Buffer.from(decrypted).toString('utf-8');
}
/**
 * Generates a new rsa key pair.
 * @returns
 */
async function createRsaKeyPair() {
    assertCryptoSupport();
    const keyPair = await generateKeyPairAsync('rsa', {
        modulusLength: 2048,
        publicKeyEncoding: { type: 'spki', format: 'pem' },
        privateKeyEncoding: { type: 'pkcs8', format: 'pem' },
    });
    return {
        format: 'rsa',
        public: keyPair.publicKey,
        secret: keyPair.privateKey,
    };
}
/**
 * Generates a new aes key.
 * @param keySize Size of the key in bytes
 * @returns Base64 encoded string representing the key
 */
async function createAesKey(keySize = 32) {
    assertCryptoSupport();
    const key = crypto.randomBytes(keySize);
    return key.toString('base64');
}
//# sourceMappingURL=keys.js.map