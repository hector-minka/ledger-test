"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signHash = signHash;
exports.verifySignature = verifySignature;
const crypto_1 = __importDefault(require("crypto"));
const asserts_1 = require("../asserts");
const format_1 = require("./format");
async function signHash(hash, keyPair) {
    (0, asserts_1.assertKeyFormat)(keyPair.format);
    if (!crypto_1.default.sign) {
        throw new Error('Unable to sign hash, `crypto.sign` is not defined');
    }
    const hashBuffer = Buffer.from(hash, 'hex');
    const key = (0, format_1.importPrivateKey)(keyPair.secret);
    // The first argument must be undefined for ed25519, it defines a digest algorithm,
    // but ed25519 makes a sha512 digest as part of the algorithm. Signing and verification
    // with ed25119 doesn't work correctly if that argument is provided. Also, most crypto
    // examples use createSign(algorithm) to first create a Sign class and use that for
    // signing, but that way also doesn't work with ed25519.
    // see: https://github.com/mscdex/io.js/commit/7d0e50dcfef98ca56715adf74678bcaf4aa08796
    const result = crypto_1.default.sign(undefined, hashBuffer, key).toString('base64');
    return {
        method: 'ed25519-v2',
        public: keyPair.public,
        digest: hash,
        result,
    };
}
async function verifySignature(hash, signature) {
    (0, asserts_1.assertSignatureMethod)(signature.method);
    if (!crypto_1.default.verify) {
        throw new Error('Unable to verify signature, `crypto.verify` is not defined');
    }
    const hashBuffer = Buffer.from(hash, 'hex');
    const signatureBuffer = Buffer.from(signature.result, 'base64');
    const key = (0, format_1.importPublicKey)(signature.public);
    // The first argument must be undefined for ed25519, it defines a digest algorithm,
    // but ed25519 makes a sha512 digest as part of the algorithm. Signing and verification
    // with ed25119 doesn't work correctly if that argument is provided. Also, most crypto
    // examples use createSign(algorithm) to first create a Sign class and use that for
    // signing, but that way also doesn't work with ed25519.
    // see: https://github.com/mscdex/io.js/commit/7d0e50dcfef98ca56715adf74678bcaf4aa08796
    return crypto_1.default.verify(undefined, hashBuffer, key, signatureBuffer);
}
//# sourceMappingURL=signing.js.map