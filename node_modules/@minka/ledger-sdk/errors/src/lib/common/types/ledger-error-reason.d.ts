/**
 * Supported ledger error statuses.
 */
export declare enum LedgerErrorReason {
    UnexpectedClientError = "unexpected-client-error",
    BridgeAccountNotFound = "bridge.account-not-found",
    BridgeAccountInactive = "bridge.account-inactive",
    BridgeAccountInsufficientBalance = "bridge.account-insufficient-balance",
    BridgeAccountLimitExceeded = "bridge.account-limit-exceeded",
    BridgeCoreInvalidAccess = "bridge.core-invalid-access",
    BridgeEntryRejected = "bridge.entry-rejected",
    BridgeEntryHashInvalid = "bridge.entry-hash-invalid",
    BridgeEntrySignatureInvalid = "bridge.entry-signature-invalid",
    BridgeEntrySignatureMismatch = "bridge.entry-signature-mismatch",
    BridgeEntrySignatureMissing = "bridge.entry-signature-missing",
    BridgeEntrySchemaInvalid = "bridge.entry-schema-invalid",
    BridgeEntryMismatch = "bridge.entry-mismatch",
    BridgeEntryDuplicated = "bridge.entry-duplicated",
    BridgeEntryTimeout = "bridge.entry-timeout",
    BridgeIncorrectFee = "bridge.incorrect-fee",
    BridgeIntentHashInvalid = "bridge.intent-hash-invalid",
    BridgeIntentSignatureInvalid = "bridge.intent-signature-invalid",
    BridgeIntentSignatureMissing = "bridge.intent-signature-missing",
    BridgeIntentUnrelated = "bridge.intent-unrelated",
    BridgeFraudDetected = "bridge.fraud-detected",
    BridgeLedgerFailed = "bridge.ledger-failed",
    BridgeCoreUnreachable = "bridge.core-unreachable",
    BridgeTransferInformationInvalid = "bridge.transfer-information-invalid",
    BridgeUnexpectedCoreError = "bridge.unexpected-core-error",
    BridgeUnexpectedError = "bridge.unexpected-error",
    BridgeCommandUnsupported = "bridge.command-unsupported",
    BridgeProxyResponseInvalid = "bridge.proxy-response-invalid",
    AuthUnauthorized = "auth.unauthorized",
    AuthForbidden = "auth.forbidden",
    CryptoHashInvalid = "crypto.hash-invalid",
    CryptoParentHashInvalid = "crypto.parent-hash-invalid",
    CryptoSignatureInvalid = "crypto.signature-invalid",
    CryptoSignatureMissing = "crypto.signature-missing",
    ApiBodyMalformed = "api.body-malformed",
    ApiQueryMalformed = "api.query-malformed",
    ApiRouteNotFound = "api.route-not-found",
    ApiRequestTimeout = "api.request-timeout",
    ApiRateLimitExceeded = "api.rate-limit-exceeded",
    ApiUnexpectedError = "api.unexpected-error",
    ApiServiceUnavailable = "api.service-unavailable",
    RecordNotFound = "record.not-found",
    RecordRelationNotFound = "record.relation-not-found",
    RecordDropRejected = "record.drop-rejected",
    RecordUpdateRejected = "record.update-rejected",
    RecordDuplicated = "record.duplicated",
    RecordSchemaInvalid = "record.schema-invalid",
    RecordInvalid = "record.invalid",
    RecordLabelsPolicyViolation = "record.labels-policy-violation",
    RecordStatusPolicyViolation = "record.status-policy-violation",
    RecordStatusQuorumNotMet = "record.status-quorum-not-met",
    CoreSourceInvalid = "core.source-invalid",
    CoreTargetInvalid = "core.target-invalid",
    CoreSymbolInvalid = "core.symbol-invalid",
    CoreInsufficientBalance = "core.insufficient-balance",
    CoreIntentExpired = "core.intent-expired",
    CoreBridgePrepareFailed = "core.bridge-prepare-failed",
    CoreBridgeUnreachable = "core.bridge-unreachable",
    CoreManualAbortRequested = "core.manual-abort-requested",
    CoreUnexpectedError = "core.unexpected-error",
    CoreRoutingFailed = "core.routing-failed",
    CoreThreadSizeExceeded = "core.thread-size-exceeded",
    CoreLimitExceeded = "core.limit-exceeded"
}
/**
 * All possible ledger error reasons.
 */
export declare const LedgerErrorReasons: LedgerErrorReason[];
