"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createError = createError;
const lodash_1 = require("lodash");
const ApiErrors = __importStar(require("./api"));
const AuthErrors = __importStar(require("./auth"));
const BridgeErrors = __importStar(require("./bridge"));
const CoreErrors = __importStar(require("./core"));
const CryptoErrors = __importStar(require("./crypto"));
const RecordErrors = __importStar(require("./record"));
// Create an object to map error reasons to error classes
const errorClassByReason = {};
// An array of imported error modules
// IMPORTANT: Should be updated in case a new error module is created
const errors = [
    ApiErrors,
    AuthErrors,
    BridgeErrors,
    CoreErrors,
    CryptoErrors,
    RecordErrors,
];
// Loop over each error module and each exported
// error class and map them to their corresponding reasons
for (const ledgerErrors of errors) {
    for (const ErrorClass of (0, lodash_1.values)(ledgerErrors)) {
        if (ErrorClass.REASON) {
            errorClassByReason[ErrorClass.REASON] = ErrorClass;
        }
    }
}
/**
 * Create an error instance based on the given reason and detail.
 * If an error class is found for the given reason, a new instance of that class
 * is created with the given detail as its argument. Otherwise, a new instance of
 * ApiUnexpectedError class is created with a default error message.
 *
 * @param reason The reason for the error
 * @param detail Optional error detail
 * @returns A new error instance
 */
function createError(reason, detail) {
    const ErrorClass = errorClassByReason[reason];
    if (ErrorClass) {
        return new ErrorClass(detail);
    }
    return new ApiErrors.ApiUnexpectedError(detail);
}
//# sourceMappingURL=error.factory.js.map