"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatList = formatList;
exports.pluralize = pluralize;
exports.formatDate = formatDate;
const moment_1 = __importDefault(require("moment"));
const listFormatter = new Intl.ListFormat('en-US', {
    style: 'long',
    type: 'conjunction',
});
/**
 * Formats a list of items so that they can be included
 * in a sentence.
 *
 * For example:
 * ```
 * ['a', 'b', 'c'] -> a, b, and c
 * ['a', 'b'] -> a and b
 * ['a'] -> a
 * ```
 *
 * @param items items list to format
 * @returns items list in a sentence form
 */
function formatList(items) {
    return listFormatter.format(items);
}
/**
 * Performs basic word pluralization by adding a provided
 * suffix to the word in case a plural form needs to be used.
 * This function is useful if you need to display a word after
 * a count or a list of items in a sentence.
 *
 * For example, if the provide noun is coin:
 * ```
 * count: 0  -> coins
 * count: 1  -> coin
 * count: 24 -> coins
 * ```
 *
 * @param count count to use for pluralization
 * @param noun noun to pluralize
 * @param suffix suffix to use for the plural form
 * @returns returns a pluralized word
 */
function pluralize(count, noun, suffix = 's') {
    return count === 1 ? noun : `${noun}${suffix}`;
}
/**
 * Formats a date into proper iso string format.
 *
 * @param date date to format
 * @returns date in iso string format
 */
function formatDate(date) {
    if (typeof date === 'undefined') {
        date = (0, moment_1.default)().toDate();
    }
    return date?.toISOString();
}
//# sourceMappingURL=format.js.map