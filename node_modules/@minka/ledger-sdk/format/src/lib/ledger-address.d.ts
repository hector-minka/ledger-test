import { LedgerAddress as TLedgerAddress } from "../../../types/src";
/**
 * Ledger addresses consist of several parts: schema, handle, and domain.
 * For example:
 * ```
 *  svgs:10001@example.com (<schema>:<handle>@<domain>)
 *    -> schema = 'svgs'
 *    -> prefix = '10001'
 *    -> domain = 'example.com'
 * ````
 *
 * All components except handle are optional, so addresses can have
 * various forms:
 * ```
 *  svgs:10001
 *  10001@example.com
 *  example.com
 *  svgs@example.com
 *```
 *
 * This class contains functions which simplify working with addresses.
 * The main purpose of it is to provide a simple way of parsing an address
 * into components and formatting new addresses.
 */
export declare class LedgerAddress {
    schema?: string;
    handle: string;
    domain?: string;
    /**
     * Parses a ledger address and returns a LedgerAddress instance
     * with all the parts extracted.
     *
     * @throws in case the provided value is not a valid ledger address
     * @returns a new LedgerAddress instance
     */
    static parse(address: TLedgerAddress): LedgerAddress;
    /**
     * Creates a new ledger address by providing address parts.
     */
    constructor({ schema, handle, domain, }: {
        schema?: string;
        handle: string;
        domain?: string;
    });
    /**
     * Formats an address as a string.
     */
    toString(): string;
}
