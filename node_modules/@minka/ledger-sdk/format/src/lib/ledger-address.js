"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LedgerAddress = void 0;
const validation_1 = require("./validation");
/**
 * Ledger addresses consist of several parts: schema, handle, and domain.
 * For example:
 * ```
 *  svgs:10001@example.com (<schema>:<handle>@<domain>)
 *    -> schema = 'svgs'
 *    -> prefix = '10001'
 *    -> domain = 'example.com'
 * ````
 *
 * All components except handle are optional, so addresses can have
 * various forms:
 * ```
 *  svgs:10001
 *  10001@example.com
 *  example.com
 *  svgs@example.com
 *```
 *
 * This class contains functions which simplify working with addresses.
 * The main purpose of it is to provide a simple way of parsing an address
 * into components and formatting new addresses.
 */
class LedgerAddress {
    schema;
    handle;
    domain;
    /**
     * Parses a ledger address and returns a LedgerAddress instance
     * with all the parts extracted.
     *
     * @throws in case the provided value is not a valid ledger address
     * @returns a new LedgerAddress instance
     */
    static parse(address) {
        const result = validation_1.ADDRESS_REGEX.exec(address);
        if (!result) {
            throw new Error(`Failed to parse a ledger address: ${address}`);
        }
        const { schema, handle, domain } = result.groups;
        return new LedgerAddress({
            schema,
            handle,
            domain,
        });
    }
    /**
     * Creates a new ledger address by providing address parts.
     */
    constructor({ schema, handle, domain, }) {
        if (!handle) {
            throw new Error(`Handle is required, got: ${handle}`);
        }
        this.schema = schema;
        this.handle = handle;
        this.domain = domain;
    }
    /**
     * Formats an address as a string.
     */
    toString() {
        if (!this.handle) {
            throw new Error(`Handle is required, it cannot be empty`);
        }
        return [
            this.schema ? this.schema + ':' : '', // Add `schema:`, if schema exists
            this.handle, // Handle is always required
            this.domain ? '@' + this.domain : '', // Add `@domain`, if domain exists
        ].join('');
    }
}
exports.LedgerAddress = LedgerAddress;
//# sourceMappingURL=ledger-address.js.map