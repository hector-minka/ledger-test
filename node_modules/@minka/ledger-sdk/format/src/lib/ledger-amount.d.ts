import BigNumber from 'bignumber.js';
import { SymbolFactor } from "../../../types/src";
/**
 * Ledger represents amounts as integer values, this class contains
 * several static methods to help convert these values between decimal
 * and integer representations.
 */
export declare class LedgerAmount {
    /**
     * Converts ledger integer amount into decimal amount depending
     * on the symbol factor.
     *
     * @param ledgerAmount integer ledger amount
     * @param factor symbol factor
     * @returns decimal amount
     * @throws if the provided ledger amount is not an integer
     */
    static toDecimal(ledgerAmount: number, factor: SymbolFactor): number;
    /**
     * Converts decimal amount into ledger integer amount using the provided
     * symbol factor.
     *
     * WARNING: This function will round the value using the `ROUND_HALF_UP`
     * rounding mode. If this is not desired, provide a value that is
     * already rounded according to your needs as a BigNumber.
     *
     * @param decimalAmount decimal amount, a number or a BigNumber instance
     * @param factor symbol factor
     * @returns integer ledger amount
     */
    static fromDecimal(decimalAmount: number | BigNumber, factor: SymbolFactor): number;
    /**
     * Formats the integer amount which represents the multiple
     * of the smallest unit of account defined by symbol factor.
     * Output is the nominal amount formatted as currency with
     * fixed number of decimal places defined by the factor.
     *
     * @example
     *   LedgerAmount.toString(1234500, 1)   -> $1,234,500
     *   LedgerAmount.toString(12345, 1)     -> $12,345
     *   LedgerAmount.toString(1234500, 100) -> $12,345.00
     *   LedgerAmount.toString(12345, 100)   -> $123.45
     *
     * @param ledgerAmount integer input amount
     * @param factor symbol factor
     * @returns formatted amount
     */
    static toString(ledgerAmount: number, factor: SymbolFactor): string;
    private constructor();
}
