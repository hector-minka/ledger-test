"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LedgerAmount = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
/**
 * Ledger represents amounts as integer values, this class contains
 * several static methods to help convert these values between decimal
 * and integer representations.
 */
class LedgerAmount {
    /**
     * Converts ledger integer amount into decimal amount depending
     * on the symbol factor.
     *
     * @param ledgerAmount integer ledger amount
     * @param factor symbol factor
     * @returns decimal amount
     * @throws if the provided ledger amount is not an integer
     */
    static toDecimal(ledgerAmount, factor) {
        if (ledgerAmount % 1 !== 0) {
            throw new Error('Input amount is not an integer');
        }
        return new bignumber_js_1.default(ledgerAmount).div(new bignumber_js_1.default(factor)).toNumber();
    }
    /**
     * Converts decimal amount into ledger integer amount using the provided
     * symbol factor.
     *
     * WARNING: This function will round the value using the `ROUND_HALF_UP`
     * rounding mode. If this is not desired, provide a value that is
     * already rounded according to your needs as a BigNumber.
     *
     * @param decimalAmount decimal amount, a number or a BigNumber instance
     * @param factor symbol factor
     * @returns integer ledger amount
     */
    static fromDecimal(decimalAmount, factor) {
        const ledgerAmount = new bignumber_js_1.default(decimalAmount)
            .times(factor)
            .decimalPlaces(0, bignumber_js_1.default.ROUND_HALF_UP)
            .toNumber();
        if (ledgerAmount % 1 !== 0) {
            throw new Error('Input decimal amount with given factor should produce integer ledger amount');
        }
        return ledgerAmount;
    }
    /**
     * Formats the integer amount which represents the multiple
     * of the smallest unit of account defined by symbol factor.
     * Output is the nominal amount formatted as currency with
     * fixed number of decimal places defined by the factor.
     *
     * @example
     *   LedgerAmount.toString(1234500, 1)   -> $1,234,500
     *   LedgerAmount.toString(12345, 1)     -> $12,345
     *   LedgerAmount.toString(1234500, 100) -> $12,345.00
     *   LedgerAmount.toString(12345, 100)   -> $123.45
     *
     * @param ledgerAmount integer input amount
     * @param factor symbol factor
     * @returns formatted amount
     */
    static toString(ledgerAmount, factor) {
        const decimalAmount = LedgerAmount.toDecimal(ledgerAmount, factor);
        const numberOfDigits = Math.log10(factor);
        const numberFormatter = new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            maximumFractionDigits: numberOfDigits,
            minimumFractionDigits: numberOfDigits,
        });
        return numberFormatter.format(decimalAmount);
    }
    constructor() {
        // This class currently provides only static methods, the constructor
        // is declared as private to prevent instatiations
        throw new Error('This class cannot be instantiated, use static methods instead');
    }
}
exports.LedgerAmount = LedgerAmount;
//# sourceMappingURL=ledger-amount.js.map