"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseDate = parseDate;
const moment_1 = __importDefault(require("moment"));
/**
 * Regex for a ISO 8601 formatted date. It is not complete and some
 * valid ISO 8601 date strings will not satisfy the pattern.
 * It is used to disallow strings that are obviously not compliant, but
 * the Date.parse function can still process them. A string that satisfies
 * this regex is not guaranteed to be a valid date, this is
 * determined by actually parsing it.
 */
const ISO_8601_REGEX = /^\d{4}(-\d{2}(-\d{2}(T\d{2}:\d{2}(:\d{2})?(\.\d+)?(([+-]\d{2}:\d{2})|Z)?)?)?)?$/i;
/**
 * Parses date from string
 * @param input string to be parsed
 * @throws {Error} in case of invalid Date
 * @returns Date parsed from input
 */
function parseDate(input) {
    if (!ISO_8601_REGEX.test(input)) {
        throw new Error('Invalid date, expected string in the following format: yyyy-MM-ddThh:mm:ss.sZ');
    }
    const output = Date.parse(input);
    if (isNaN(output)) {
        throw new Error('Invalid date');
    }
    return (0, moment_1.default)(output).toDate();
}
//# sourceMappingURL=parse.js.map