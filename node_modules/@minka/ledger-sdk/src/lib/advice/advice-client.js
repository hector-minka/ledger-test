"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdviceClient = exports.AdviceAliasResolveResponse = exports.AdviceName = void 0;
const lodash_1 = __importDefault(require("lodash"));
const base_client_1 = require("../common/clients/base-client");
const create_record_builder_1 = require("../common/services/create-record-builder");
const base_record_response_1 = require("../common/types/base-record-response");
var AdviceName;
(function (AdviceName) {
    AdviceName["AliasResolve"] = "alias-resolve";
})(AdviceName || (exports.AdviceName = AdviceName = {}));
const ADVICES_PATH = '/advices';
/**
 * Single advice API response.
 */
class AdviceAliasResolveResponse extends base_record_response_1.BaseRecordResponse {
    /**
     * Record data extracted from the `data` property of the response body.
     */
    result;
    constructor(response) {
        super(response);
        this.result = response?.data?.data;
    }
}
exports.AdviceAliasResolveResponse = AdviceAliasResolveResponse;
/**
 * Allows executing advices.
 *
 * @see {AdviceAliasResolveResult}
 */
class AdviceClient extends base_client_1.BaseClient {
    /**
     * Initializes a builder instance that supports chaining to make it
     * easier to work with ledger records. You can pass the record
     * payload to this method to use as initial content, this is useful
     * when you already have an object ready, for example when validating
     * API responses or modifying an existing record. An empty record is
     * going to be created if no initial data is provided.
     *
     * @see {AdviceAliasResolveResult}
     * @see {CreateRecordBuilder}
     * @param name advice name
     * @param record initial payload for advice call
     * @returns a builder instance
     */
    call(name, record) {
        const builder = new create_record_builder_1.CreateRecordBuilder(async (record, reqOptions) => {
            return this.createRecord(`${ADVICES_PATH}/${name}`, AdviceAliasResolveResponse, record, reqOptions);
        });
        record = lodash_1.default.cloneDeep(record);
        return builder.init(record);
    }
}
exports.AdviceClient = AdviceClient;
//# sourceMappingURL=advice-client.js.map