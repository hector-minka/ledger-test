/**
 * @module RecordBuilder / ActivateBridgeBuilder
 * @category Record Builders
 */
import { BridgeActivationOptions, LedgerIdentifier, LedgerRecord } from "../../../types/src";
import { BaseCompositeBuilder } from '../common/services/base-composite-builder';
import { RequestOptions } from '../common/types/request-options';
import { BridgeActivationResponse } from './bridge-client';
type SendActivationFunction = (record: LedgerRecord<BridgeActivationOptions>, bridge: LedgerIdentifier, reqOptions?: RequestOptions) => Promise<BridgeActivationResponse>;
/**
 * Specific builder for activating a bridge.
 *
 * @example
 * // Activating an existing bridge
 * const { bridge } = await sdk.bridge
 *  .with(<bridge handle>)
 *  .activate({
 *    offset: <offset>
 *  })
 *  .hash()
 *  .sign([{ keyPair }])
 *  .send()
 */
export declare class ActivateBridgeBuilder extends BaseCompositeBuilder<BridgeActivationOptions, BridgeActivationResponse> {
    /**
     * A handler function used to submit a signature to ledger.
     */
    private sendActivation;
    /**
     * Identifier of bridge on remote server i.e. handle or luid
     */
    private bridge;
    constructor(sendActivation: SendActivationFunction, bridge: LedgerIdentifier, payload: BridgeActivationOptions);
    /**
     * Sends activation request to ledger.
     *
     * @param requestOptions Optional request options to use for this request
     * @returns api response
     * @throws if any method in builder chain fails
     */
    send(requestOptions?: RequestOptions): Promise<BridgeActivationResponse>;
}
export {};
