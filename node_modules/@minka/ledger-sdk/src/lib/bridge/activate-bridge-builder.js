"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivateBridgeBuilder = void 0;
const base_composite_builder_1 = require("../common/services/base-composite-builder");
const ledger_sdk_error_1 = require("../common/types/ledger-sdk-error");
/**
 * Specific builder for activating a bridge.
 *
 * @example
 * // Activating an existing bridge
 * const { bridge } = await sdk.bridge
 *  .with(<bridge handle>)
 *  .activate({
 *    offset: <offset>
 *  })
 *  .hash()
 *  .sign([{ keyPair }])
 *  .send()
 */
class ActivateBridgeBuilder extends base_composite_builder_1.BaseCompositeBuilder {
    /**
     * A handler function used to submit a signature to ledger.
     */
    sendActivation;
    /**
     * Identifier of bridge on remote server i.e. handle or luid
     */
    bridge;
    constructor(sendActivation, bridge, payload) {
        super({ data: payload });
        this.sendActivation = sendActivation;
        this.bridge = bridge;
    }
    /**
     * Sends activation request to ledger.
     *
     * @param requestOptions Optional request options to use for this request
     * @returns api response
     * @throws if any method in builder chain fails
     */
    async send(requestOptions) {
        try {
            const record = await this.recordBuilder.read();
            const finalOptions = {
                authParams: requestOptions?.authParams ?? this.authParams,
                headers: requestOptions?.headers,
            };
            return this.sendActivation(record, this.bridge, finalOptions);
        }
        catch (error) {
            throw new ledger_sdk_error_1.LedgerSdkError(error);
        }
    }
}
exports.ActivateBridgeBuilder = ActivateBridgeBuilder;
//# sourceMappingURL=activate-bridge-builder.js.map