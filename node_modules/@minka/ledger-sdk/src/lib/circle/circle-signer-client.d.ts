/**
 * @module Clients / Circle Signers
 * @category Entities
 */
import { AxiosResponse } from 'axios';
import { LedgerCircleSigner, LedgerIdentifier, LedgerPagedList, LedgerRecord } from "../../../types/src";
import { BaseClient, BaseClientOptions } from '../common/clients/base-client';
import { CreateRecordBuilder } from '../common/services/create-record-builder';
import { DropRecordBuilder } from '../common/services/drop-record-builder';
import { BaseRecordResponse } from '../common/types/base-record-response';
import { BaseListResponse } from '../common/types/list-response';
import { BaseReadOptions } from '../common/types/read-options';
import { CircleSignerListParams } from './circle-list-params';
/**
 * Single signer API response.
 */
export declare class CircleSignerResponse extends BaseRecordResponse<LedgerCircleSigner> {
    /**
     * Record data extracted from the `data` property of the response body.
     */
    circleSigner: LedgerCircleSigner;
    constructor(response: AxiosResponse<LedgerRecord<LedgerCircleSigner>, LedgerRecord<LedgerCircleSigner>>);
}
/**
 * CircleSignerLinks list API response.
 */
export declare class CircleSignersResponse extends BaseListResponse<LedgerCircleSigner> {
    circleSigners: LedgerCircleSigner[];
    constructor(response: AxiosResponse<LedgerPagedList<LedgerCircleSigner>, void>);
}
/**
 * Allows querying and managing signers.
 *
 * @see {LedgerCircleSigner}
 */
export declare class CircleSignerClient extends BaseClient {
    private parentPath;
    constructor(options: BaseClientOptions, parentPath: string);
    private buildBasePath;
    /**
     * Initializes a builder instance that supports chaining to make it
     * easier to work with ledger records. You can pass the record
     * payload to this method to use as initial content, this is useful
     * when you already have an object ready, for example when validating
     * API responses or modifying an existing record. An empty record is
     * going to be created if no initial data is provided.
     *
     * @see {LedgerCircleSigner}
     * @see {CreateRecordBuilder}
     * @param record initial record payload (optional)
     * @returns a builder instance
     */
    init(record?: Partial<LedgerRecord<LedgerCircleSigner>>): CreateRecordBuilder<LedgerCircleSigner, CircleSignerResponse, import("../../../types/src").LedgerMeta>;
    /**
     * Initializes a builder instance that supports chaining to make it
     * easier to work with ledger records. You can pass the record
     * payload to this method to use as initial content, this is useful
     * when you already have an object ready, for example when validating
     * API responses or modifying an existing record. An empty record is
     * going to be created if no initial data is provided.
     *
     * @see {LedgerCircleSigner}
     * @see {DropRecordBuilder}
     * @param id signer identifier (optional)
     * @returns a builder instance
     */
    drop(id?: LedgerIdentifier): DropRecordBuilder<LedgerCircleSigner, import("../../../types/src").LedgerMeta>;
    /**
     * Gets a circle signer link by identifier (luid or handle).
     *
     * @see {LedgerCircleSigner}
     * @throws {Error} if the circle signer link doesn't exist or the
     *   current user doesn't have access to this record
     * @param id a unique effect handle
     * @returns a single effect response with the requested effect
     */
    read(id: LedgerIdentifier, options?: BaseReadOptions): Promise<CircleSignerResponse>;
    /**
     * Queries signers of a circle from a ledger.
     *
     * @see {LedgerCircleSigner}
     * @param params query parameters
     * @returns signers list response with all found signers
     */
    list(params?: CircleSignerListParams): Promise<CircleSignersResponse>;
}
