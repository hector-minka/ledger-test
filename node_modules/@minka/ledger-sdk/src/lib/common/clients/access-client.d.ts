/**
 * @module Clients / Circle Signers
 * @category Entities
 */
import { AxiosResponse } from 'axios';
import { AccessCheck, LedgerAccessRule, LedgerPagedList, LedgerRecord } from "../../../../types/src";
import { AccessCheckBuilder } from '../services/check-access.builder';
import { BaseListResponse } from '../types/list-response';
import { BaseClient, BaseClientOptions } from './base-client';
/**
 * Access check API response.
 */
export declare class AccessCheckResponse extends BaseListResponse<LedgerAccessRule> {
    rules: LedgerAccessRule[];
    constructor(response: AxiosResponse<LedgerPagedList<LedgerAccessRule>, void>);
}
/**
 * Allows querying access.
 *
 * @see {AccessRule}
 */
export declare class AccessClient extends BaseClient {
    protected parentPath: string;
    constructor(options: BaseClientOptions, parentPath: string);
    protected buildBasePath(): string;
    /**
     * Initializes a builder instance that supports chaining to make it
     * easier to work with ledger records. You can pass the record
     * payload to this method to use as initial content, this is useful
     * when you already have an object ready, for example when validating
     * API responses or modifying an existing record. An empty record is
     * going to be created if no initial data is provided.
     *
     * @see {LedgerAccessRule}
     * @see {AccessCheckBuilder}
     * @param record initial record payload (optional)
     * @returns AccessCheckBuilder instance
     */
    check(record?: Partial<LedgerRecord<AccessCheck>>): AccessCheckBuilder<Partial<AccessCheck>, AccessCheckResponse, import("../../../../types/src").LedgerMeta>;
}
