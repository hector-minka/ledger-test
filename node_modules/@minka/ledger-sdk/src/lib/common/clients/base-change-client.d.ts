import { AxiosResponse } from 'axios';
import { ChangeMeta, LedgerPagedList, LedgerRecord } from "../../../../types/src";
import { BaseRecordResponse } from '../types/base-record-response';
import { BaseListParamsWithoutSearch } from '../types/list-params';
import { BaseListResponse } from '../types/list-response';
import { BaseReadOptions } from '../types/read-options';
import { BaseClient, BaseClientOptions } from './base-client';
/**
 * Default record change response
 */
export declare class ChangeResponse<TRecord> extends BaseRecordResponse<TRecord, ChangeMeta> {
    /**
     * Record data extracted from the `data` property of the response body.
     */
    change: TRecord;
    constructor(response: AxiosResponse<LedgerRecord<TRecord, ChangeMeta>, LedgerRecord<TRecord, ChangeMeta>>);
}
/**
 * Default record changes list response
 */
export declare class ChangesResponse<TRecord> extends BaseListResponse<TRecord, ChangeMeta> {
    changes: TRecord[];
    records: LedgerRecord<TRecord, ChangeMeta>[];
    constructor(response: AxiosResponse<LedgerPagedList<TRecord, ChangeMeta>, void>);
}
/**
 * Base change client
 */
export declare class BaseChangeClient<TRecord> extends BaseClient {
    protected parentPath: string;
    constructor(options: BaseClientOptions, parentPath: string);
    protected buildBasePath(): string;
    /**
     * Gets a record change.
     *
     * @throws {Error} if the record change doesn't exist or the
     *   current user doesn't have access to this record
     * @param id change id
     * @returns a single change response with the requested change
     */
    read(id: number, options?: BaseReadOptions): Promise<ChangeResponse<TRecord>>;
    /**
     * Queries changes of a record from.
     *
     * @param params query parameters
     * @returns changes list response with all found changes
     */
    list(params?: BaseListParamsWithoutSearch): Promise<ChangesResponse<TRecord>>;
}
