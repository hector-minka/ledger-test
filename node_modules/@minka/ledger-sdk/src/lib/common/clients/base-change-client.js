"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseChangeClient = exports.ChangesResponse = exports.ChangeResponse = void 0;
const base_record_response_1 = require("../types/base-record-response");
const list_response_1 = require("../types/list-response");
const base_client_1 = require("./base-client");
/**
 * Default record change response
 */
class ChangeResponse extends base_record_response_1.BaseRecordResponse {
    /**
     * Record data extracted from the `data` property of the response body.
     */
    change;
    constructor(response) {
        super(response);
        this.change = response?.data?.data;
    }
}
exports.ChangeResponse = ChangeResponse;
/**
 * Default record changes list response
 */
class ChangesResponse extends list_response_1.BaseListResponse {
    changes;
    records;
    constructor(response) {
        super(response);
        this.changes = response?.data?.data?.map((record) => record.data);
        this.records = response?.data?.data || [];
    }
}
exports.ChangesResponse = ChangesResponse;
const DEFAULT_CHANGES_PATH = 'changes';
/**
 * Base change client
 */
class BaseChangeClient extends base_client_1.BaseClient {
    parentPath;
    constructor(options, parentPath) {
        super(options);
        this.parentPath = parentPath;
    }
    buildBasePath() {
        const record = this.assertParentId();
        return `${this.parentPath}/${encodeURIComponent(record)}/${DEFAULT_CHANGES_PATH}`;
    }
    /**
     * Gets a record change.
     *
     * @throws {Error} if the record change doesn't exist or the
     *   current user doesn't have access to this record
     * @param id change id
     * @returns a single change response with the requested change
     */
    async read(id, options) {
        return this.getRecord(`${this.buildBasePath()}/${encodeURIComponent(id)}`, (ChangeResponse), options);
    }
    /**
     * Queries changes of a record from.
     *
     * @param params query parameters
     * @returns changes list response with all found changes
     */
    async list(params) {
        return this.getRecordsList(this.buildBasePath(), (ChangesResponse), params);
    }
}
exports.BaseChangeClient = BaseChangeClient;
//# sourceMappingURL=base-change-client.js.map