/**
 * @module Clients / BaseClient
 * @category Entities
 */
import { AxiosInstance, AxiosRequestConfig } from 'axios';
import { DropData, JwtConfig, LedgerAccessRule, LedgerIdentifier, LedgerMeta, LedgerProof, LedgerRecord, LedgerRequestHashParams, SecretRevealQuery } from "../../../../types/src";
import { IBaseClient } from '../interfaces/base-client.interface';
import { IMultitenantClient } from '../interfaces/multitenant-client.interface';
import { BaseRecordResponse, RecordResponseClass } from '../types/base-record-response';
import { BaseResponse, ResponseClass } from '../types/base-response';
import { DropRecordResponse } from '../types/drop-record-response';
import { HeaderValue } from '../types/headers';
import { BaseListParams, BaseListParamsWithoutSearch } from '../types/list-params';
import { BaseListResponse, ListResponseClass } from '../types/list-response';
import { BaseReadOptions } from '../types/read-options';
import { RequestOptions } from '../types/request-options';
export type BaseClientOptions = {
    apiClient: AxiosInstance;
    secure?: JwtConfig;
    ledger?: string;
    headers?: {
        [key: string]: string;
    };
};
/**
 * A base API client that contains generic functions to make
 * API requests compatible with the ledger API.
 */
export declare abstract class BaseClient implements IBaseClient, IMultitenantClient {
    protected apiClient: AxiosInstance;
    private authParams;
    private activeLedger;
    protected links: BaseClient[];
    protected id: LedgerIdentifier;
    private parentId;
    protected readonly headers: Record<string, HeaderValue>;
    protected readonly secure: JwtConfig;
    constructor(options: BaseClientOptions);
    /**
     * Internal function for building request hash
     * based on HTTP request variables.
     *
     * @param requestHashParams Configuration object for request hashing
     * @returns request hash
     */
    private buildRequestHash;
    /**
     * Internal function for building the bearer token
     * from Ledger Auth params.
     *
     * @param requestHashParams Configuration object for request hashing
     * @param authParams Params for building JWT
     * @returns the bearer token
     */
    protected buildJwt(requestHashParams: LedgerRequestHashParams, authParams?: Partial<JwtConfig>): Promise<string>;
    protected buildHeaders(token: string, overrideHeaders?: Record<string, HeaderValue>): Record<string, HeaderValue>;
    /**
     * Internal function for creating new ledger records
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    protected createRecord<RecordType, RecordResponseType extends BaseRecordResponse<RecordType, MetaType>, MetaType extends LedgerMeta = LedgerMeta, ReqOptions extends RequestOptions = RequestOptions>(path: string, ResponseClass: RecordResponseClass<RecordType, RecordResponseType, MetaType>, record: LedgerRecord<RecordType, MetaType>, options?: ReqOptions): Promise<RecordResponseType>;
    /**
     * Internal function for ledger records lookup
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    protected lookupRecord<T, R extends BaseListResponse<T, M>, M extends LedgerMeta = LedgerMeta, ReqOptions extends RequestOptions = RequestOptions>(path: string, ResponseClass: ListResponseClass<T, R, M>, lookupRecord: LedgerRecord<T, M>, options?: ReqOptions): Promise<R>;
    /**
     * Internal function for checking access
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    protected checkAccess<T, R extends BaseListResponse<LedgerAccessRule, M>, M extends LedgerMeta = LedgerMeta, ReqOptions extends RequestOptions = RequestOptions>(path: string, ResponseClass: ListResponseClass<LedgerAccessRule, R, M>, accessCheck: LedgerRecord<T, M>, options?: ReqOptions): Promise<R>;
    /**
     * Internal function for revealing secret
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    protected revealSecret<T, R extends BaseRecordResponse<SecretRevealQuery, M>, M extends LedgerMeta = LedgerMeta, ReqOptions extends RequestOptions = RequestOptions>(path: string, ResponseClass: RecordResponseClass<SecretRevealQuery, R, M>, secretQuery: LedgerRecord<T, M>, options?: ReqOptions): Promise<R>;
    /**
     * Internal function for activating ledger records
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    protected activateRecord<T, R extends BaseResponse, M extends LedgerMeta = LedgerMeta, ReqOptions extends RequestOptions = RequestOptions>(path: string, ResponseClass: ResponseClass<R>, record: LedgerRecord<T, M>, options?: ReqOptions): Promise<R>;
    /**
     * Internal function for updating ledger records
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    protected updateRecord<T, R extends BaseRecordResponse<T, M>, M extends LedgerMeta = LedgerMeta, ReqOptions extends RequestOptions = RequestOptions>(path: string, ResponseClass: RecordResponseClass<T, R, M>, record: LedgerRecord<T, M>, options?: ReqOptions): Promise<R>;
    /**
     * Internal function for creating new ledger records
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    protected signRecord<T, R extends BaseRecordResponse<T, M>, M extends LedgerMeta = LedgerMeta, ReqOptions extends RequestOptions = RequestOptions>(path: string, ResponseClass: RecordResponseClass<T, R, M>, signature: LedgerProof, options?: ReqOptions): Promise<R>;
    /**
     * Internal function for droping ledger records
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    protected dropRecord<T, M extends LedgerMeta = LedgerMeta, ReqOptions extends RequestOptions = RequestOptions>(path: string, deletionRecord: LedgerRecord<DropData, M>, options?: ReqOptions): Promise<DropRecordResponse>;
    /**
     * Internal function for fetching a single ledger record
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    protected getRecord<T, R extends BaseRecordResponse<T, M>, M extends LedgerMeta = LedgerMeta, Options extends BaseReadOptions = BaseReadOptions>(path: string, ResponseClass: RecordResponseClass<T, R, M>, readOptions?: Options): Promise<R>;
    /**
     * Internal function for fetching a list of ledger records
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    protected getRecordsList<T, R extends BaseListResponse<T, M>, M extends LedgerMeta = LedgerMeta, ListParams extends BaseListParamsWithoutSearch = BaseListParams>(path: string, ResponseClass: ListResponseClass<T, R, M>, params?: ListParams): Promise<R>;
    /**
     * Resolves the path before sending the request in order
     * to generate the correct JWT
     *
     * @param {string} url url to be resolved
     * @param {AxiosRequestConfig} [config] axios request configuration
     * that will be used to send the request
     * @returns {string} resolved path
     */
    protected createRelativeUrl(url: string, config?: AxiosRequestConfig): string;
    /**
     * Set config params to build authentication Jwt
     *
     * @param authParams jwt configuration
     */
    setAuthParams(authParams: Partial<JwtConfig>): void;
    /**
     * Sets header
     *
     * @param key
     * @param value
     */
    setHeader(key: string, value: string): void;
    /**
     * Sets active ledger
     * @param handle active ledger handle
     */
    setActiveLedger(handle: string): void;
    /**
     * Gets active ledger
     * @returns active ledger handle
     */
    getActiveLedger(): string;
    /**
     * Asserts the client doesn't have
     * an active ledger set in context
     * @throws {LedgerSdkError}
     */
    protected assertSingleTenant(): void;
    /**
     * Asserts the client has
     * an active ledger set in context
     * @throws {LedgerSdkError}
     */
    protected assertMultiTenant(): void;
    /**
     * Creates a new instance of the client and sets
     * the id to the context.
     *
     * @param id
     */
    with(id: LedgerIdentifier): this;
    /**
     * Sets record identifier to context.
     *
     * This method is also responsible for updating
     * the parent id of their linked clients.
     *
     * @param id
     */
    protected setId(id: LedgerIdentifier): this;
    /**
     * Sets parent client record id to context
     *
     * @param id
     */
    protected setParentId(id: LedgerIdentifier): void;
    /**
     * Ensures parent id is set
     *
     * @returns parent id
     */
    protected assertParentId(): LedgerIdentifier;
    /**
     * Ensures id is set
     *
     * @returns id
     */
    protected assertId(): LedgerIdentifier;
}
