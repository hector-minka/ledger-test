"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseClient = void 0;
const lodash_1 = __importDefault(require("lodash"));
const fp_1 = __importDefault(require("lodash/fp"));
const moment_1 = __importDefault(require("moment"));
const safe_stable_stringify_1 = require("safe-stable-stringify");
const crypto_1 = require("../../../../crypto/src");
const types_1 = require("../../../../types/src");
const package_json_1 = require("../../../../package.json");
const axios_params_serializer_1 = require("../services/axios-params-serializer");
const drop_record_response_1 = require("../types/drop-record-response");
const ledger_sdk_error_1 = require("../types/ledger-sdk-error");
const read_options_1 = require("../types/read-options");
const logDebugError = (error) => {
    if (process?.env?.LEDGER_E2E_DEBUG !== 'true') {
        return;
    }
    // eslint-disable-next-line no-console
    console.error(`BaseClient: Error occurred while communicating with ledger API: ${error?.message}`);
    // eslint-disable-next-line no-console
    console.error((0, safe_stable_stringify_1.stringify)(error));
};
/**
 * A base API client that contains generic functions to make
 * API requests compatible with the ledger API.
 */
class BaseClient {
    apiClient;
    authParams;
    activeLedger;
    links;
    id;
    parentId;
    headers;
    secure;
    constructor(options) {
        this.apiClient = options.apiClient;
        if (options.secure) {
            this.secure = options.secure;
        }
        this.activeLedger = options.ledger;
        this.headers = options.headers ?? {};
    }
    /**
     * Internal function for building request hash
     * based on HTTP request variables.
     *
     * @param requestHashParams Configuration object for request hashing
     * @returns request hash
     */
    buildRequestHash(requestHashParams) {
        const protectedHeaders = this.activeLedger
            ? [
                { name: 'x-ledger', value: this.activeLedger },
                ...requestHashParams.protectedHeaders,
            ]
            : requestHashParams.protectedHeaders;
        const protectedHeadersSuffix = fp_1.default.flow([
            fp_1.default.map((h) => h.name.toLowerCase()),
            fp_1.default.join(','),
            (suffix) => (suffix ? `:${suffix}` : ''),
        ])(protectedHeaders);
        const headers = fp_1.default.flow([
            fp_1.default.map((h) => [h.name, h.value]),
            fp_1.default.fromPairs,
        ])(protectedHeaders);
        const hsh = (0, crypto_1.createHash)({
            method: requestHashParams.method,
            url: requestHashParams.url,
            body: !lodash_1.default.isEmpty(requestHashParams.body) ? requestHashParams.body : null,
            headers: !lodash_1.default.isEmpty(headers) ? headers : null,
        });
        return `${hsh}${protectedHeadersSuffix}`;
    }
    /**
     * Internal function for building the bearer token
     * from Ledger Auth params.
     *
     * @param requestHashParams Configuration object for request hashing
     * @param authParams Params for building JWT
     * @returns the bearer token
     */
    async buildJwt(requestHashParams, authParams = {}) {
        if (lodash_1.default.isEmpty(authParams) &&
            lodash_1.default.isEmpty(this.secure) &&
            lodash_1.default.isEmpty(this.authParams)) {
            return null;
        }
        const params = {
            ...(this.secure || {}),
            ...this.authParams,
            ...authParams,
        };
        if (!(0, types_1.isJwtOptions)(params)) {
            return params.overrideToken;
        }
        const iat = Math.floor((0, moment_1.default)().valueOf() / 1000);
        const exp = iat + params.exp;
        const verificationKey = params.kid || params.keyPair.public;
        let hsh;
        if (lodash_1.default.isUndefined(params.createHsh) || params.createHsh) {
            hsh = this.buildRequestHash(requestHashParams);
        }
        const jwtPayload = {
            iat,
            exp,
            iss: params.iss,
            aud: params.aud,
            sub: params.sub || verificationKey,
            jti: params.jti || undefined,
            hsh,
        };
        const token = await (0, crypto_1.signJWT)(jwtPayload, params.keyPair.secret, verificationKey);
        return `Bearer ${token}`;
    }
    buildHeaders(token, overrideHeaders = {}) {
        const authHeaders = token ? { Authorization: token } : {};
        const ledgerHeaders = this.activeLedger
            ? { 'X-Ledger': this.activeLedger }
            : {};
        const headers = {
            ...this.headers,
            ...authHeaders,
            ...ledgerHeaders,
            ...overrideHeaders,
        };
        const sdkUserAgent = `LedgerSDK/${package_json_1.version}`;
        headers['User-Agent'] = headers['User-Agent']
            ? `${headers['User-Agent']} ${sdkUserAgent}`
            : sdkUserAgent;
        return headers;
    }
    /**
     * Internal function for creating new ledger records
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    async createRecord(path, ResponseClass, record, options) {
        try {
            const token = await this.buildJwt({
                method: 'POST',
                url: this.createRelativeUrl(path),
                body: record,
                protectedHeaders: [],
            }, options?.authParams);
            const headers = this.buildHeaders(token, options?.headers);
            const response = await this.apiClient.post(path, record, { headers });
            return new ResponseClass(response);
        }
        catch (error) {
            logDebugError(error);
            throw new ledger_sdk_error_1.LedgerSdkError(error);
        }
    }
    /**
     * Internal function for ledger records lookup
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    async lookupRecord(path, ResponseClass, lookupRecord, options) {
        try {
            const token = await this.buildJwt({
                method: 'POST',
                url: this.createRelativeUrl(path),
                body: lookupRecord,
                protectedHeaders: [],
            }, options?.authParams);
            const headers = this.buildHeaders(token, options?.headers);
            const response = await this.apiClient.post(path, lookupRecord, { headers });
            return new ResponseClass(response);
        }
        catch (error) {
            logDebugError(error);
            throw new ledger_sdk_error_1.LedgerSdkError(error);
        }
    }
    /**
     * Internal function for checking access
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    async checkAccess(path, ResponseClass, accessCheck, options) {
        try {
            const token = await this.buildJwt({
                method: 'POST',
                url: this.createRelativeUrl(path),
                body: accessCheck,
                protectedHeaders: [],
            }, options?.authParams);
            const headers = this.buildHeaders(token, options?.headers);
            const response = await this.apiClient.post(path, accessCheck, { headers });
            return new ResponseClass(response);
        }
        catch (error) {
            logDebugError(error);
            throw new ledger_sdk_error_1.LedgerSdkError(error);
        }
    }
    /**
     * Internal function for revealing secret
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    async revealSecret(path, ResponseClass, secretQuery, options) {
        try {
            const token = await this.buildJwt({
                method: 'POST',
                url: this.createRelativeUrl(path),
                body: secretQuery,
                protectedHeaders: [],
            }, options?.authParams);
            const headers = this.buildHeaders(token, options?.headers);
            const response = await this.apiClient.post(path, secretQuery, { headers });
            return new ResponseClass(response);
        }
        catch (error) {
            logDebugError(error);
            throw new ledger_sdk_error_1.LedgerSdkError(error);
        }
    }
    /**
     * Internal function for activating ledger records
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    async activateRecord(path, ResponseClass, record, options) {
        try {
            const token = await this.buildJwt({
                method: 'POST',
                url: this.createRelativeUrl(path),
                body: record,
                protectedHeaders: [],
            }, options?.authParams);
            const headers = this.buildHeaders(token, options?.headers);
            const response = await this.apiClient.post(path, record, { headers });
            return new ResponseClass(response);
        }
        catch (error) {
            logDebugError(error);
            throw new ledger_sdk_error_1.LedgerSdkError(error);
        }
    }
    /**
     * Internal function for updating ledger records
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    async updateRecord(path, ResponseClass, record, options) {
        try {
            const token = await this.buildJwt({
                method: 'PUT',
                url: this.createRelativeUrl(path),
                body: record,
                protectedHeaders: [],
            }, options?.authParams);
            const headers = this.buildHeaders(token, options?.headers);
            const response = await this.apiClient.put(path, record, { headers });
            return new ResponseClass(response);
        }
        catch (error) {
            logDebugError(error);
            throw new ledger_sdk_error_1.LedgerSdkError(error);
        }
    }
    /**
     * Internal function for creating new ledger records
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    async signRecord(path, ResponseClass, signature, options) {
        try {
            const token = await this.buildJwt({
                method: 'POST',
                url: this.createRelativeUrl(path),
                body: signature,
                protectedHeaders: [],
            }, options?.authParams);
            const headers = this.buildHeaders(token, options?.headers);
            const response = await this.apiClient.post(path, signature, { headers });
            return new ResponseClass(response);
        }
        catch (error) {
            logDebugError(error);
            throw new ledger_sdk_error_1.LedgerSdkError(error);
        }
    }
    /**
     * Internal function for droping ledger records
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    async dropRecord(path, deletionRecord, options) {
        try {
            const token = await this.buildJwt({
                method: 'DELETE',
                url: this.createRelativeUrl(path),
                body: deletionRecord,
                protectedHeaders: [],
            }, options?.authParams);
            const headers = this.buildHeaders(token, options?.headers);
            const response = await this.apiClient.delete(path, { data: deletionRecord, headers });
            return new drop_record_response_1.DropRecordResponse(response);
        }
        catch (error) {
            logDebugError(error);
            throw new ledger_sdk_error_1.LedgerSdkError(error);
        }
    }
    /**
     * Internal function for fetching a single ledger record
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    async getRecord(path, ResponseClass, readOptions = {}) {
        try {
            let authParams = {};
            let options = {};
            if ((0, read_options_1.isReadOptions)(readOptions)) {
                authParams = readOptions.authParams || {};
                options = lodash_1.default.omit(readOptions, 'authParams');
            }
            else {
                authParams = readOptions;
            }
            /**
             * Build axios configuration beforehand so we can resolve
             * the path including the query parameters with the proper
             * serializer.
             */
            const axiosConfig = {
                params: options.query || {},
                /**
                 * @see {@link https://github.com/axios/axios/#request-config}
                 */
                paramsSerializer: axios_params_serializer_1.axiosParamsSerializer,
            };
            const resolvedUrl = this.createRelativeUrl(path, axiosConfig);
            const token = await this.buildJwt({
                method: 'GET',
                url: resolvedUrl,
                body: {},
                protectedHeaders: [],
            }, authParams);
            axiosConfig.headers = this.buildHeaders(token, options.headers);
            const response = await this.apiClient.get(path, axiosConfig);
            return new ResponseClass(response);
        }
        catch (error) {
            logDebugError(error);
            throw new ledger_sdk_error_1.LedgerSdkError(error);
        }
    }
    /**
     * Internal function for fetching a list of ledger records
     * and enforcing the correct types on axios.
     *
     * @param path API path to call
     * @returns the API response
     */
    async getRecordsList(path, ResponseClass, params) {
        try {
            /**
             * Build axios configuration beforehand so we can resolve
             * the path including the query parameters with the proper
             * serializer.
             */
            const axiosConfig = {
                params,
                /**
                 * @see {@link https://github.com/axios/axios/#request-config}
                 */
                paramsSerializer: axios_params_serializer_1.axiosParamsSerializer,
            };
            const resolvedUrl = this.createRelativeUrl(path, axiosConfig);
            const token = await this.buildJwt({
                method: 'GET',
                url: resolvedUrl,
                body: {},
                protectedHeaders: [],
            }, params?.authParams);
            axiosConfig.headers = this.buildHeaders(token, params?.headers);
            const response = await this.apiClient.get(path, axiosConfig);
            return new ResponseClass(response);
        }
        catch (error) {
            logDebugError(error);
            throw new ledger_sdk_error_1.LedgerSdkError(error);
        }
    }
    /**
     * Resolves the path before sending the request in order
     * to generate the correct JWT
     *
     * @param {string} url url to be resolved
     * @param {AxiosRequestConfig} [config] axios request configuration
     * that will be used to send the request
     * @returns {string} resolved path
     */
    createRelativeUrl(url, config) {
        return decodeURIComponent(this.apiClient.getUri({
            url,
            ...config,
        }));
    }
    /**
     * Set config params to build authentication Jwt
     *
     * @param authParams jwt configuration
     */
    setAuthParams(authParams) {
        this.authParams = lodash_1.default.cloneDeep(authParams);
        if (this.links) {
            for (const link of this.links) {
                link.setAuthParams(authParams);
            }
        }
    }
    /**
     * Sets header
     *
     * @param key
     * @param value
     */
    setHeader(key, value) {
        lodash_1.default.set(this.headers, key, value);
    }
    /**
     * Sets active ledger
     * @param handle active ledger handle
     */
    setActiveLedger(handle) {
        this.activeLedger = handle;
        if (this.links) {
            for (const link of this.links) {
                link.setActiveLedger(handle);
            }
        }
    }
    /**
     * Gets active ledger
     * @returns active ledger handle
     */
    getActiveLedger() {
        return this.activeLedger;
    }
    /**
     * Asserts the client doesn't have
     * an active ledger set in context
     * @throws {LedgerSdkError}
     */
    assertSingleTenant() {
        if (this.activeLedger) {
            throw new ledger_sdk_error_1.LedgerSdkError(new Error('Active ledger should not be set in context'));
        }
    }
    /**
     * Asserts the client has
     * an active ledger set in context
     * @throws {LedgerSdkError}
     */
    assertMultiTenant() {
        if (!this.activeLedger) {
            throw new ledger_sdk_error_1.LedgerSdkError(new Error('Active ledger should be set in context'));
        }
    }
    /**
     * Creates a new instance of the client and sets
     * the id to the context.
     *
     * @param id
     */
    with(id) {
        const clone = lodash_1.default.cloneDeep(this);
        clone.setId(id);
        return clone;
    }
    /**
     * Sets record identifier to context.
     *
     * This method is also responsible for updating
     * the parent id of their linked clients.
     *
     * @param id
     */
    setId(id) {
        this.id = id;
        if (this.links) {
            for (const link of this.links) {
                link.setParentId(id);
            }
        }
        return this;
    }
    /**
     * Sets parent client record id to context
     *
     * @param id
     */
    setParentId(id) {
        this.parentId = id;
    }
    /**
     * Ensures parent id is set
     *
     * @returns parent id
     */
    assertParentId() {
        if (!this.parentId) {
            throw new ledger_sdk_error_1.LedgerSdkError(new Error(`Missing parent record identifier`));
        }
        return this.parentId;
    }
    /**
     * Ensures id is set
     *
     * @returns id
     */
    assertId() {
        if (!this.id) {
            throw new ledger_sdk_error_1.LedgerSdkError(new Error(`Missing record identifier`));
        }
        return this.id;
    }
}
exports.BaseClient = BaseClient;
//# sourceMappingURL=base-client.js.map