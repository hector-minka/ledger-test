/**
 * @module Clients / Secret Client
 * @category Entities
 */
import { AxiosResponse } from 'axios';
import { LedgerMeta, LedgerRecord, SecretRevealQuery } from "../../../../types/src";
import { SecretRevealBuilder } from '../services/secret-reveal.builder';
import { BaseRecordResponse } from '../types/base-record-response';
import { BaseClient, BaseClientOptions } from './base-client';
/**
 * Secret reveal API response.
 */
export declare class RevealedSecretResponse extends BaseRecordResponse<SecretRevealQuery> {
    secret: LedgerMeta['secret'];
    constructor(response: AxiosResponse<LedgerRecord<SecretRevealQuery>, LedgerRecord<SecretRevealQuery>>);
}
/**
 * Allows revealing secret values.
 *
 * @see {LedgerMeta['secret']}
 */
export declare class SecretClient extends BaseClient {
    protected parentPath: string;
    constructor(options: BaseClientOptions, parentPath: string);
    protected buildBasePath(): string;
    /**
     * Initializes a builder instance that supports chaining to make it
     * easier to work with ledger records. You can pass the record
     * payload to this method to use as initial content, this is useful
     * when you already have an object ready, for example when validating
     * API responses or modifying an existing record. An empty record is
     * going to be created if no initial data is provided.
     *
     * @see {LedgerAccessRule}
     * @see {SecretRevealBuilder}
     * @param record initial record payload (optional)
     * @returns SecretRevealBuilder instance
     */
    reveal(record?: Partial<LedgerRecord<SecretRevealQuery>>): SecretRevealBuilder<Partial<SecretRevealQuery>, RevealedSecretResponse, LedgerMeta>;
}
