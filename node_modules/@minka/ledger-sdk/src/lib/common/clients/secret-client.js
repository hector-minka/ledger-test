"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretClient = exports.RevealedSecretResponse = void 0;
const lodash_1 = __importDefault(require("lodash"));
const secret_reveal_builder_1 = require("../services/secret-reveal.builder");
const base_record_response_1 = require("../types/base-record-response");
const base_client_1 = require("./base-client");
const SECRET_PATH = 'secret';
/**
 * Secret reveal API response.
 */
class RevealedSecretResponse extends base_record_response_1.BaseRecordResponse {
    secret;
    constructor(response) {
        super(response);
        this.secret = response?.data?.meta.secret;
    }
}
exports.RevealedSecretResponse = RevealedSecretResponse;
/**
 * Allows revealing secret values.
 *
 * @see {LedgerMeta['secret']}
 */
class SecretClient extends base_client_1.BaseClient {
    parentPath;
    constructor(options, parentPath) {
        super(options);
        this.parentPath = parentPath;
    }
    buildBasePath() {
        const address = this.assertParentId();
        return `${this.parentPath}/${encodeURIComponent(address)}/${SECRET_PATH}`;
    }
    /**
     * Initializes a builder instance that supports chaining to make it
     * easier to work with ledger records. You can pass the record
     * payload to this method to use as initial content, this is useful
     * when you already have an object ready, for example when validating
     * API responses or modifying an existing record. An empty record is
     * going to be created if no initial data is provided.
     *
     * @see {LedgerAccessRule}
     * @see {SecretRevealBuilder}
     * @param record initial record payload (optional)
     * @returns SecretRevealBuilder instance
     */
    reveal(record) {
        const builder = new secret_reveal_builder_1.SecretRevealBuilder(async (record, authParams) => {
            return this.revealSecret(this.buildBasePath() + '/!reveal', RevealedSecretResponse, record, { authParams });
        });
        record = lodash_1.default.cloneDeep(record);
        return builder.init(record);
    }
}
exports.SecretClient = SecretClient;
//# sourceMappingURL=secret-client.js.map