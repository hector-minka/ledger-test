"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.axiosParamsSerializer = void 0;
const lodash_1 = __importDefault(require("lodash"));
const qs_1 = __importDefault(require("qs"));
exports.axiosParamsSerializer = {
    serialize: (params) => {
        /**
         * Expected format by GCP is "brackets" instead of dot notation.
         * Also, qs stringify properly encodes the brackets while
         * axios doesn't by default, that's why we use it here.
         *
         * @see {@link https://github.com/axios/axios/issues/3316}
         */
        const encoded = qs_1.default.stringify(params, { allowDots: true });
        // qs.stringify does not stringify entries in a Map so we process sort "manually"
        // though we still use a builtin fn to encode key and value individually.
        // they do not require encoding now but they might if the enum changes
        // or some DTO has a property with a character that should be encoded when set in an query string
        if (!params.sort || lodash_1.default.isEmpty(params.sort)) {
            return encoded;
        }
        const encodedSortEntries = Array.from(params.sort.entries()).map(([key, value]) => {
            const encodedKey = encodeURIComponent(`sort.${key}`);
            return `${encodedKey}=${encodeURIComponent(value)}`;
        });
        return `${encoded}&${encodedSortEntries.join('&')}`;
    },
};
//# sourceMappingURL=axios-params-serializer.js.map