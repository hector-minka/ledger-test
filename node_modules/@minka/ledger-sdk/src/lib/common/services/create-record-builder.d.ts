import { LedgerMeta, LedgerRecord, LedgerSigningParams } from "../../../../types/src";
import { BaseRecordResponse } from '../types/base-record-response';
import { RequestOptions } from '../types/request-options';
import { BaseRecordBuilder } from './base-record-builder';
/**
 * A handler for creating new records on the remote API.
 */
export type CreateRecordHandler<T, R, M extends LedgerMeta = LedgerMeta> = (record: LedgerRecord<T, M>, sendOptions?: RequestOptions) => Promise<R>;
/**
 * Implements a builder pattern that allows a more
 * convenient way to work with ledger records. This
 * class has functions that simplify construction,
 * hashing, signing, testing and sending records to
 * remote ledger instances.
 *
 * This builder is intended for creating new records,
 * sending a record to ledger will attempt to create it
 * on the API with the content that was prepared in the
 * builder.
 *
 * NOTE: current record instance is mutated by this
 * class, we are not cloning instances intentionally,
 * and it isn't advised to reuse builder instances when
 * working with multiple records or mutating objects
 * passed to this builder in external code. It is
 * recommended to clone objects in such cases to avoid
 * unexpected behaviors.
 */
export declare class CreateRecordBuilder<TRecord, TResponse extends BaseRecordResponse<TRecord, TMeta>, TMeta extends LedgerMeta = LedgerMeta> extends BaseRecordBuilder<TRecord, TMeta> {
    /**
     * A handler for creating new records on the remote API.
     */
    protected createRecord: CreateRecordHandler<TRecord, TResponse, TMeta>;
    /**
     * Creates new instance of record builder.
     * @param createRecord function which creates new record on ledger api
     */
    constructor(createRecord: CreateRecordHandler<TRecord, TResponse, TMeta>);
    /**
     * Sends the current record version to the remote ledger.
     * @param requestOptions Optional request options to use for this request
     * @returns api response with the created record
     * @throws if any method in builder chain fails
     */
    send(requestOptions?: RequestOptions): Promise<TResponse>;
    /**
     * Sets custom.status 'created' to all the signatures that don't have status.
     * @param params signatures
     * @returns this builder instance for chaining
     */
    sign(params: LedgerSigningParams[]): this;
}
