"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateRecordBuilder = void 0;
/**
 * @module RecordBuilder / CreateRecordBuilder
 * @category Record Builders
 */
const lodash_1 = __importDefault(require("lodash"));
const fp_1 = __importDefault(require("lodash/fp"));
const types_1 = require("../../../../types/src");
const ledger_sdk_error_1 = require("../types/ledger-sdk-error");
const base_record_builder_1 = require("./base-record-builder");
/**
 * Implements a builder pattern that allows a more
 * convenient way to work with ledger records. This
 * class has functions that simplify construction,
 * hashing, signing, testing and sending records to
 * remote ledger instances.
 *
 * This builder is intended for creating new records,
 * sending a record to ledger will attempt to create it
 * on the API with the content that was prepared in the
 * builder.
 *
 * NOTE: current record instance is mutated by this
 * class, we are not cloning instances intentionally,
 * and it isn't advised to reuse builder instances when
 * working with multiple records or mutating objects
 * passed to this builder in external code. It is
 * recommended to clone objects in such cases to avoid
 * unexpected behaviors.
 */
class CreateRecordBuilder extends base_record_builder_1.BaseRecordBuilder {
    /**
     * A handler for creating new records on the remote API.
     */
    createRecord;
    /**
     * Creates new instance of record builder.
     * @param createRecord function which creates new record on ledger api
     */
    constructor(createRecord) {
        super();
        this.createRecord = createRecord;
    }
    /**
     * Sends the current record version to the remote ledger.
     * @param requestOptions Optional request options to use for this request
     * @returns api response with the created record
     * @throws if any method in builder chain fails
     */
    async send(requestOptions) {
        try {
            await this.finishAsyncOperations();
            return this.createRecord(this.record, {
                authParams: requestOptions?.authParams ?? this.authParams,
                headers: requestOptions?.headers,
            });
        }
        catch (error) {
            throw new ledger_sdk_error_1.LedgerSdkError(error);
        }
    }
    /**
     * Sets custom.status 'created' to all the signatures that don't have status.
     * @param params signatures
     * @returns this builder instance for chaining
     */
    sign(params) {
        const flow = fp_1.default.flow([
            fp_1.default.cloneDeep,
            fp_1.default.update('custom.status', (status) => lodash_1.default.isUndefined(status) ? types_1.LedgerSignatureStatus.Created : status),
        ]);
        params = fp_1.default.map(flow)(params);
        return super.sign(params);
    }
}
exports.CreateRecordBuilder = CreateRecordBuilder;
//# sourceMappingURL=create-record-builder.js.map