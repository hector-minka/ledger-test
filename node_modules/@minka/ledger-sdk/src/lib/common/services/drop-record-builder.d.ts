import { LedgerMeta, LedgerRecord, LedgerSigningParams } from "../../../../types/src";
import { DropRecordResponse } from '../types/drop-record-response';
import { BaseReadOptions } from '../types/read-options';
import { RequestOptions } from '../types/request-options';
import { BaseRecordBuilder } from './base-record-builder';
/**
 * A handler for droping records on the remote API.
 */
export type DropRecordHandler<T, M extends LedgerMeta = LedgerMeta> = (record: LedgerRecord<T, M>, reqOptions?: RequestOptions) => Promise<DropRecordResponse>;
/**
 * A handler for reading records on the remote API.
 */
export type ReadRecordHandler<T, M extends LedgerMeta = LedgerMeta> = (options?: BaseReadOptions) => Promise<LedgerRecord<T, M>>;
/**
 * Implements a builder pattern that allows a more
 * convenient way to work with ledger records. This
 * class has functions that simplify construction,
 * hashing, signing, testing and sending records to
 * remote ledger instances.
 *
 * This builder is intended for record drops, sending
 * a record to ledger will perform the drop operation
 * on the API with the record that was prepared in the
 * builder.
 *
 * NOTE: current record instance is mutated by this
 * class, we are not cloning instances intentionally,
 * and it isn't advised to reuse builder instances when
 * working with multiple records or mutating objects
 * passed to this builder in external code. It is
 * recommended to clone objects in such cases to avoid
 * unexpected behaviors.
 */
export declare class DropRecordBuilder<T extends Record<string, any>, M extends LedgerMeta = LedgerMeta> extends BaseRecordBuilder<T, M> {
    /**
     * A handler for droping records on the remote API.
     */
    protected dropRecord: DropRecordHandler<T, M>;
    /**
     * A handler for reading records on the remote API.
     */
    protected readRecord: ReadRecordHandler<T, M>;
    /**
     * Creates new instance of record builder.
     *
     * @param dropRecord function which drops records on ledger API.
     */
    constructor(dropRecord: DropRecordHandler<T, M>, readRecord: ReadRecordHandler<T, M>);
    /**
     * Initializes the record. This function will completely
     * replace all existing record properties.
     *
     * @param record the record
     * @returns this builder instance for chaining
     */
    init(): this;
    /**
     * Sends the current record version to the remote ledger.
     *
     * @param requestOptions Optional request options to use for this request
     * @returns api response with the dropped record
     * @throws if any method in builder chain fails
     */
    send(requestOptions?: RequestOptions): Promise<DropRecordResponse>;
    /**
     * Sets custom.status 'dropped' to all the signatures.
     *
     * @param params signatures
     * @returns this builder instance for chaining
     */
    sign(params: LedgerSigningParams[]): this;
}
