"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LookupRecordBuilder = void 0;
const ledger_sdk_error_1 = require("../types/ledger-sdk-error");
const base_record_builder_1 = require("./base-record-builder");
/**
 * Implements a builder pattern that allows a more
 * convenient way to work with ledger records. This
 * class has functions that simplify construction,
 * hashing, signing, testing and sending records to
 * remote ledger instances.
 *
 * This builder is intended for creating new records,
 * sending a record to ledger will attempt to create it
 * on the API with the content that was prepared in the
 * builder.
 *
 * NOTE: current record instance is mutated by this
 * class, we are not cloning instances intentionally,
 * and it isn't advised to reuse builder instances when
 * working with multiple records or mutating objects
 * passed to this builder in external code. It is
 * recommended to clone objects in such cases to avoid
 * unexpected behaviors.
 */
class LookupRecordBuilder extends base_record_builder_1.BaseRecordBuilder {
    /**
     * A handler for anchor lookup on the remote API.
     */
    lookupRecord;
    /**
     * Creates new instance of record builder.
     *
     * @param lookupRecord function which handles lookup on ledger api
     */
    constructor(lookupRecord) {
        super();
        this.lookupRecord = lookupRecord;
    }
    /**
     * Sends the current lookup payload to the remote ledger.
     *
     * @param requestOptions Optional request options to use for this request
     * @returns api response with the lookup response
     * @throws if any method in builder chain fails
     */
    async send(requestOptions) {
        try {
            await this.finishAsyncOperations();
            const finalOptions = {
                authParams: requestOptions?.authParams ?? this.authParams,
                headers: requestOptions?.headers,
            };
            return this.lookupRecord(this.record, finalOptions);
        }
        catch (error) {
            throw new ledger_sdk_error_1.LedgerSdkError(error);
        }
    }
}
exports.LookupRecordBuilder = LookupRecordBuilder;
//# sourceMappingURL=lookup-record-builder.js.map