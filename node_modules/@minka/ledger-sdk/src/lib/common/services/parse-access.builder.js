"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParseAccessBuilder = void 0;
/**
 * @module RecordBuilder / AccessCheckBuilder
 * @category Record Builders
 */
const lodash_1 = __importDefault(require("lodash"));
const mingo_1 = require("mingo");
const types_1 = require("../../../../types/src");
const ledger_sdk_error_1 = require("../types/ledger-sdk-error");
class ParseAccessBuilder {
    sourceAccess;
    constructor(sourceAccess) {
        const clone = lodash_1.default.clone(sourceAccess);
        this.sourceAccess = clone;
    }
    /**
     * Check permission to an action in a record
     * within the source access rules.
     *
     * @returns permission check
     * @throws if source access is not informed
     */
    async can(input) {
        if (!this.sourceAccess) {
            throw new ledger_sdk_error_1.LedgerSdkError(new Error('Cannot parse permission without source access'));
        }
        if (lodash_1.default.isEmpty(this.sourceAccess)) {
            return false;
        }
        const { action, record, filter, change } = input;
        return this.sourceAccess.some((accessRule) => {
            const actionQuery = new mingo_1.Query({
                action: accessRule.action,
            });
            const recordQuery = new mingo_1.Query({
                record: accessRule.record,
            });
            const filterQuery = new mingo_1.Query(accessRule.filter || {});
            const changeQuery = new mingo_1.Query(accessRule.change || {});
            return (actionQuery.test({ action: [action, types_1.AccessAction.Any] }) &&
                recordQuery.test({ record: [record, types_1.AccessRecord.Any] }) &&
                filterQuery.test(filter) &&
                changeQuery.test(change));
        });
    }
}
exports.ParseAccessBuilder = ParseAccessBuilder;
//# sourceMappingURL=parse-access.builder.js.map