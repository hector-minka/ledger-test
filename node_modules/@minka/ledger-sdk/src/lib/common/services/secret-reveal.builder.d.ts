/**
 * @module RecordBuilder / SecretRevealBuilder
 * @category Record Builders
 */
import { JwtConfig, LedgerMeta, LedgerRecord, SecretRevealQuery } from "../../../../types/src";
import { BaseRecordResponse } from '../types/base-record-response';
import { BaseRecordBuilder } from './base-record-builder';
/**
 * A handler for revealing secret on the remote API.
 */
export type SecretRevealHandler<T, R, M extends LedgerMeta = LedgerMeta> = (record: LedgerRecord<T, M>, authParams: JwtConfig) => Promise<R>;
/**
 * Implements a builder pattern that allows a more
 * convenient way to work with ledger records. This
 * class has functions that simplify construction,
 * hashing, signing, testing and sending records to
 * remote ledger instances.
 *
 * This builder is intended for sending secret reveal
 * queries to ledger, and will attempt to send it on
 * the API with the content that was prepared in the
 * builder.
 */
export declare class SecretRevealBuilder<T, R extends BaseRecordResponse<SecretRevealQuery, M>, M extends LedgerMeta = LedgerMeta> extends BaseRecordBuilder<T, M> {
    /**
     * A handler for secret reveal on the remote API.
     */
    protected revealSecret: SecretRevealHandler<T, R, M>;
    /**
     * Creates new instance of secret reveal builder.
     *
     * @param revealSecret function which handles secret reveal on ledger api
     */
    constructor(revealSecret: SecretRevealHandler<T, R, M>);
    /**
     * Sends the current secret query payload to the remote ledger.
     *
     * @returns api response with the decrypted secrets
     * @throws if any method in builder chain fails
     */
    send(): Promise<R>;
}
