"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LedgerSdkError = void 0;
/**
 * @module Types / LedgerSdkError
 * @category Types
 */
const axios_1 = require("axios");
const lodash_1 = __importDefault(require("lodash"));
const errors_1 = require("../../../../errors/src");
/**
 * An error containing additional information extracted from API
 * responses, if found. This error contains a ledger `reason` enum,
 * `detail` message with a short error explanation and a `custom`
 * object that contains more detailed information about an error.
 */
class LedgerSdkError extends Error {
    /**
     * Ledger error code.
     */
    reason;
    /**
     * A message providing more information about an error.
     */
    detail;
    /**
     * Additional error context that depends on the
     * error type. Most common properties of this object:
     * - causedBy: an underlying error that caused this error
     * - body: a raw response body from non-standard errors
     * - errors: an array of validation errors
     */
    custom;
    constructor(causedBy) {
        // Return an underlying error is it is already a LedgerSdkError
        if (causedBy instanceof LedgerSdkError) {
            return causedBy;
        }
        super();
        if (causedBy instanceof errors_1.LedgerError) {
            this.reason = causedBy.reason;
            this.detail = causedBy.detail;
            this.custom = causedBy.custom;
            return;
        }
        this.custom = {};
        if (causedBy instanceof axios_1.AxiosError) {
            this.name = 'LedgerApiError';
            const responseBody = causedBy.response?.data;
            if (responseBody?.data?.reason) {
                // We have received a valid ledger api error,
                // let's extract the details
                this.reason = responseBody.data.reason;
                this.detail = responseBody.data.detail || 'No reason provided';
                this.custom = lodash_1.default.cloneDeep(responseBody.data.custom) || {};
            }
            else {
                // We have received an unexpected response from the server
                this.reason = errors_1.LedgerErrorReason.ApiUnexpectedError;
                this.detail = causedBy.message || 'Unexpected server error occurred!';
                this.custom = {
                    body: responseBody,
                };
            }
        }
        else {
            // This is not an axios error, a client error occurred
            this.reason = errors_1.LedgerErrorReason.UnexpectedClientError;
            this.detail = causedBy.message;
        }
        this.custom.causedBy = causedBy;
        // Populate the default Error message with the resolved
        // reason for compatibility
        this.message = this.reason;
    }
    toJSON() {
        // Strip the underlying error to avoid issues with
        // circular references during serialization.
        return lodash_1.default.merge({}, this, {
            custom: {
                causedBy: null,
            },
        });
    }
}
exports.LedgerSdkError = LedgerSdkError;
//# sourceMappingURL=ledger-sdk-error.js.map