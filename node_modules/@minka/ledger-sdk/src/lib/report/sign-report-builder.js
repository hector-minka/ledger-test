"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignReportBuilder = void 0;
const base_composite_builder_1 = require("../common/services/base-composite-builder");
const ledger_sdk_error_1 = require("../common/types/ledger-sdk-error");
/**
 * Specific builder for adding signatures to ledger reports.
 * Report content cannot be modified, the only updates allowed
 * on reports are adding signatures which are used to control
 * report processing.
 *
 * @example
 * // Adding a new signature to an existing report
 * const { report } = await sdk.report
 *  .from(ledgerReport)
 *  .hash()
 *  .sign([{
 *     keyPair: {
 *       format: keyPair.format,
 *       public: keyPair.public,
 *       secret: keyPair.secret,
 *     },
 *     custom: {
 *       someKey: 'someValue'
 *     }
 *   }])
 *  .send()
 */
class SignReportBuilder extends base_composite_builder_1.BaseCompositeBuilder {
    /**
     * A handler function used to submit a signature to ledger.
     */
    sendSignature;
    /**
     * New signatures start index. Only signatures from this
     * index are going to be sent to ledger. Earlier signatures
     * existed on the record before it was passed to this builder.
     */
    newSignaturesStartIndex;
    constructor(sendSignature, report) {
        super(report);
        this.sendSignature = sendSignature;
        this.newSignaturesStartIndex = report.meta?.proofs?.length || 0;
    }
    /**
     * Sends the new signatures to ledger.
     *
     * @param requestOptions Optional request options to use for this request
     * @returns api response with the updated report
     * @throws if any method in builder chain fails
     */
    async send(requestOptions) {
        try {
            const report = await this.recordBuilder.read();
            const signatures = report?.meta?.proofs?.slice(this.newSignaturesStartIndex) || [];
            if (signatures.length === 0) {
                throw new Error('Unable to send signatures, no signatures found!');
            }
            const finalOptions = {
                authParams: requestOptions?.authParams ?? this.authParams,
                headers: requestOptions?.headers,
            };
            let result = null;
            for (const signature of signatures) {
                result = await this.sendSignature(signature, finalOptions);
            }
            return result;
        }
        catch (error) {
            throw new ledger_sdk_error_1.LedgerSdkError(error);
        }
    }
}
exports.SignReportBuilder = SignReportBuilder;
//# sourceMappingURL=sign-report-builder.js.map