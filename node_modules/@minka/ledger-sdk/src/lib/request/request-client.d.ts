import { AxiosResponse } from 'axios';
import { LedgerHandle, LedgerPagedList, LedgerRecord, LedgerRequest } from "../../../types/src";
import { BaseClient } from '../common/clients/base-client';
import { BaseRecordResponse } from '../common/types/base-record-response';
import { BaseListResponse } from '../common/types/list-response';
import { BaseReadOptions } from '../common/types/read-options';
import { RequestListParams } from './request-list-params';
/**
 * Single request API response.
 */
export declare class RequestResponse extends BaseRecordResponse<LedgerRequest> {
    /**
     * Record data extracted from the `data` property of the response body.
     */
    request: LedgerRequest;
    constructor(response: AxiosResponse<LedgerRecord<LedgerRequest>, LedgerRecord<LedgerRequest>>);
}
/**
 * Requests list API response.
 */
export declare class RequestsResponse extends BaseListResponse<LedgerRequest> {
    requests: LedgerRequest[];
    constructor(response: AxiosResponse<LedgerPagedList<LedgerRequest>, void>);
}
/**
 * Allows querying of requests.
 *
 * @see {LedgerRequest}
 */
export declare class RequestClient extends BaseClient {
    /**
     * Gets a ledger request by handle.
     *
     * @see {LedgerRequest}
     * @throws {Error} if the request doesn't exist or the
     *   current user doesn't have access to this request
     * @param handle a unique request handle
     * @returns a single request
     */
    read(handle: LedgerHandle, options?: BaseReadOptions): Promise<RequestResponse>;
    /**
     * Queries requests from a ledger.
     *
     * @see {LedgerRequest}
     * @param params query parameters
     * @returns requests list response with all found requests
     */
    list(params?: RequestListParams): Promise<RequestsResponse>;
}
