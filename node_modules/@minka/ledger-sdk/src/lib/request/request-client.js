"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestClient = exports.RequestsResponse = exports.RequestResponse = void 0;
const base_client_1 = require("../common/clients/base-client");
const base_record_response_1 = require("../common/types/base-record-response");
const list_response_1 = require("../common/types/list-response");
const REQUESTS_PATH = '/system/requests';
/**
 * Single request API response.
 */
class RequestResponse extends base_record_response_1.BaseRecordResponse {
    /**
     * Record data extracted from the `data` property of the response body.
     */
    request;
    constructor(response) {
        super(response);
        this.request = response?.data?.data;
    }
}
exports.RequestResponse = RequestResponse;
/**
 * Requests list API response.
 */
class RequestsResponse extends list_response_1.BaseListResponse {
    requests;
    constructor(response) {
        super(response);
        this.requests = response?.data?.data?.map((record) => record.data);
    }
}
exports.RequestsResponse = RequestsResponse;
/**
 * Allows querying of requests.
 *
 * @see {LedgerRequest}
 */
class RequestClient extends base_client_1.BaseClient {
    /**
     * Gets a ledger request by handle.
     *
     * @see {LedgerRequest}
     * @throws {Error} if the request doesn't exist or the
     *   current user doesn't have access to this request
     * @param handle a unique request handle
     * @returns a single request
     */
    async read(handle, options) {
        return this.getRecord(`${REQUESTS_PATH}/${encodeURIComponent(handle)}`, RequestResponse, options);
    }
    /**
     * Queries requests from a ledger.
     *
     * @see {LedgerRequest}
     * @param params query parameters
     * @returns requests list response with all found requests
     */
    async list(params) {
        return this.getRecordsList(REQUESTS_PATH, RequestsResponse, params);
    }
}
exports.RequestClient = RequestClient;
//# sourceMappingURL=request-client.js.map