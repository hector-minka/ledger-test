/**
 * @module Clients / Server Access
 * @category Entities
 */
import { AccessCheck, JwtConfig, LedgerAccessRule, LedgerRecord } from "../../../types/src";
import { AccessClient } from '../common/clients/access-client';
import { BaseClientOptions } from '../common/clients/base-client';
import { IBaseClient } from '../common/interfaces/base-client.interface';
import { ParseAccessBuilder } from '../common/services/parse-access.builder';
/**
 * Allows checking server access.
 *
 */
declare class AccessDelegateClient extends AccessClient {
    constructor(options: BaseClientOptions);
    protected buildBasePath(): string;
}
/**
 * Allows querying access at server level.
 */
export declare class ServerAccessClient implements IBaseClient {
    protected accessClient: AccessDelegateClient;
    protected parseAccessBuilder: ParseAccessBuilder;
    constructor(options: BaseClientOptions);
    /**
     * Checks access at server level
     *
     * @param record access check
     * @returns builder instance
     */
    check(record?: Partial<LedgerRecord<AccessCheck>>): import("../common/services/check-access.builder").AccessCheckBuilder<Partial<AccessCheck>, import("../common/clients/access-client").AccessCheckResponse, import("../../../types/src").LedgerMeta>;
    /**
     * Set config params to build authentication Jwt
     *
     * @param authParams jwt configuration
     */
    setAuthParams(authParams: Partial<JwtConfig>): void;
    /**
     * Sets header
     *
     * @param key
     * @param value
     */
    setHeader(key: string, value: string): void;
    /**
     * Initializes parse access builder with source access rules.
     * @param accessRules source access rules
     * @returns
     */
    with(accessRules: LedgerAccessRule[]): ParseAccessBuilder;
}
export {};
