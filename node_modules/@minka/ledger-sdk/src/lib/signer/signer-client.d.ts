/**
 * @module Clients / Signers
 * @category Entities
 */
import { AxiosResponse } from 'axios';
import { LedgerIdentifier, LedgerPagedList, LedgerRecord, LedgerSigner } from "../../../types/src";
import { AccessClient } from '../common/clients/access-client';
import { BaseChangeClient } from '../common/clients/base-change-client';
import { BaseClient, BaseClientOptions } from '../common/clients/base-client';
import { UpdateRecordBuilder } from '../common/services/update-record-builder';
import { BaseRecordResponse } from '../common/types/base-record-response';
import { BaseListResponse } from '../common/types/list-response';
import { BaseReadOptions } from '../common/types/read-options';
import { SignerCircleClient } from './signer-circle-client';
import { SignerFactorClient } from './signer-factor-client';
import { SignerListParams } from './signer-list-params';
import { SignerRecordBuilder } from './signer-record-builder';
/**
 * Single signer API response.
 */
export declare class SignerResponse extends BaseRecordResponse<LedgerSigner> {
    /**
     * Record data extracted from the `data` property of the response body.
     */
    signer: LedgerSigner;
    constructor(response: AxiosResponse<LedgerRecord<LedgerSigner>, LedgerRecord<LedgerSigner>>);
}
/**
 * Signers list API response.
 */
export declare class SignersResponse extends BaseListResponse<LedgerSigner> {
    /**
     * A flattened list of records, extracted from the `data` property of
     * each record returned.
     */
    signers: LedgerSigner[];
    constructor(response: AxiosResponse<LedgerPagedList<LedgerSigner>, void>);
}
/**
 * Allows querying the ledger signers.
 *
 * @see {LedgerSigner}
 */
export declare class SignerClient extends BaseClient {
    /**
     * Allows querying and managing circle signers.
     *
     * @see {LedgerCircleSigner}
     */
    circle: SignerCircleClient;
    /**
     * Allows querying and managing signer factors.
     *
     * @see {LedgerFactor}
     */
    factor: SignerFactorClient;
    /**
     * Allows querying changes.
     *
     */
    change: BaseChangeClient<LedgerSigner>;
    /**
     * Allows checking access.
     *
     */
    access: AccessClient;
    constructor(options: BaseClientOptions);
    /**
     * Initializes a builder instance that supports chaining to make it
     * easier to work with ledger records. You can pass the record
     * payload to this method to use as initial content, this is useful
     * when you already have an object ready, for example when validating
     * API responses or modifying an existing record. An empty record is
     * going to be created if no initial data is provided.
     *
     * @see {LedgerSigner}
     * @see {SignerRecordBuilder}
     * @param options.record initial record payload (optional)
     * @param options.handle specify handle to be updated, if any (optional)
     * @returns a builder instance
     */
    init(record?: Partial<LedgerRecord<LedgerSigner>>): SignerRecordBuilder;
    /**
     * Initializes a builder instance for updating existing records.
     * The builder supports chaining to make it easier to work with
     * ledger records. You can pass the existing record payload to
     * this method to use as initial content.
     *
     * @see {LedgerSigner}
     * @see {UpdateRecordBuilder}
     * @param record initial record payload
     * @param moment record state time
     * @returns a builder instance
     */
    from(record: LedgerRecord<LedgerSigner>): UpdateRecordBuilder<LedgerSigner, SignerResponse, import("../../../types/src").LedgerMeta>;
    /**
     * Gets a ledger signer by identifier (luid or handle).
     *
     * @see {LedgerSigner}
     * @throws {Error} if the signer doesn't exist or the
     *   current user doesn't have access to this signer
     * @param id a unique signer identifier
     * @returns a single signer response with the requested signer
     */
    read(id: LedgerIdentifier, options?: BaseReadOptions): Promise<SignerResponse>;
    /**
     * Queries signers from a ledger.
     *
     * @see {LedgerSigner}
     * @param params query parameters
     * @returns signers list response with all found wallets
     */
    list(params?: SignerListParams): Promise<SignersResponse>;
}
