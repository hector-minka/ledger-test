/**
 * @module Clients / Signer Factor
 * @category Entities
 */
import { AxiosResponse } from 'axios';
import { LedgerFactor, LedgerIdentifier, LedgerPagedList, LedgerRecord } from "../../../types/src";
import { AccessClient } from '../common/clients/access-client';
import { BaseChangeClient } from '../common/clients/base-change-client';
import { BaseClient, BaseClientOptions } from '../common/clients/base-client';
import { SecretClient } from '../common/clients/secret-client';
import { CreateRecordBuilder } from '../common/services/create-record-builder';
import { DropRecordBuilder } from '../common/services/drop-record-builder';
import { UpdateRecordBuilder } from '../common/services/update-record-builder';
import { BaseRecordResponse } from '../common/types/base-record-response';
import { BaseListResponse } from '../common/types/list-response';
import { SignerFactorReadOptions } from './signer-factor-read-options';
import { SignerFactorListParams } from './signer-list-params';
/**
 * Single signer factor API response.
 */
export declare class SignerFactorResponse extends BaseRecordResponse<LedgerFactor> {
    /**
     * Record data extracted from the `data` property of the response body.
     */
    factor: LedgerFactor;
    constructor(response: AxiosResponse<LedgerRecord<LedgerFactor>, LedgerRecord<LedgerFactor>>);
}
/**
 * Signer factors list API response.
 */
export declare class SignerFactorsResponse extends BaseListResponse<LedgerFactor> {
    /**
     * A flattened list of records, extracted from the `data` property of
     * each record returned.
     */
    factors: LedgerFactor[];
    constructor(response: AxiosResponse<LedgerPagedList<LedgerFactor>, void>);
}
/**
 * Allows querying signer factors.
 * @see {LedgerFactor}
 */
export declare class SignerFactorClient extends BaseClient {
    protected options: BaseClientOptions;
    private parentPath;
    /**
     * Allows querying changes.
     */
    change: BaseChangeClient<LedgerFactor>;
    /**
     * Allows checking access.
     */
    access: AccessClient;
    /**
     * Allows revealing secret.
     */
    secret: SecretClient;
    constructor(options: BaseClientOptions, parentPath: string);
    /**
     * Sets parent client record id to context. Overrides baseClient
     * so we can use the dynamic buildBasePath method in the clients.
     * @param id parent id
     */
    protected setParentId(id: LedgerIdentifier): void;
    private buildBasePath;
    /**
     * Initializes a builder instance that supports chaining to make it
     * easier to work with ledger records. You can pass the record
     * payload to this method to use as initial content, this is useful
     * when you already have an object ready, for example when validating
     * API responses or modifying an existing record. An empty record is
     * going to be created if no initial data is provided.
     * @see {LedgerFactor}
     * @see {SignerRecordBuilder}
     * @param record partial of record payload
     * @returns a builder instance
     */
    init(record?: Partial<LedgerRecord<LedgerFactor>>): CreateRecordBuilder<LedgerFactor, SignerFactorResponse, import("../../../types/src").LedgerMeta>;
    /**
     * Initializes a builder instance for updating existing records.
     * The builder supports chaining to make it easier to work with
     * ledger records. You can pass the existing record payload to
     * this method to use as initial content.
     * @see {LedgerFactor}
     * @see {UpdateRecordBuilder}
     * @param record initial record payload
     * @returns a builder instance
     */
    from(record: LedgerRecord<LedgerFactor>): UpdateRecordBuilder<LedgerFactor, SignerFactorResponse, import("../../../types/src").LedgerMeta>;
    /**
     * Gets a ledger signer factor by identifier (luid or handle).
     * @see {LedgerFactor}
     * @throws {Error} if the signer factor doesn't exist or the
     *   current user doesn't have access to this signer factor
     * @param id a unique signer factor identifier
     * @param authParams optional authentication parameters
     * @returns a single signer factor response with the requested signer factor
     */
    read(id: LedgerIdentifier, options?: SignerFactorReadOptions): Promise<SignerFactorResponse>;
    /**
     * Queries signer factors from a ledger.
     * @see {LedgerFactor}
     * @param params query parameters
     * @returns signer factors list response with all found wallets
     */
    list(params?: SignerFactorListParams): Promise<SignerFactorsResponse>;
    /**
     * Initializes a builder instance that supports chaining to make it
     * easier to work with ledger records. You can pass the record
     * payload to this method to use as initial content, this is useful
     * when you already have an object ready, for example when validating
     * API responses or modifying an existing record. An empty record is
     * going to be created if no initial data is provided.
     *
     * @see {LedgerFactor}
     * @see {DropRecordBuilder}
     * @param id signer identifier (optional)
     * @returns a builder instance
     */
    drop(id?: LedgerIdentifier): DropRecordBuilder<LedgerFactor, import("../../../types/src").LedgerMeta>;
}
