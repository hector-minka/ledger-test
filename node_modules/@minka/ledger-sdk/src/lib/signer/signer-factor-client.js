"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignerFactorClient = exports.SignerFactorsResponse = exports.SignerFactorResponse = void 0;
const lodash_1 = __importDefault(require("lodash"));
const access_client_1 = require("../common/clients/access-client");
const base_change_client_1 = require("../common/clients/base-change-client");
const base_client_1 = require("../common/clients/base-client");
const secret_client_1 = require("../common/clients/secret-client");
const create_record_builder_1 = require("../common/services/create-record-builder");
const drop_record_builder_1 = require("../common/services/drop-record-builder");
const update_record_builder_1 = require("../common/services/update-record-builder");
const base_record_response_1 = require("../common/types/base-record-response");
const list_response_1 = require("../common/types/list-response");
const SIGNER_FACTOR_PATH = 'factors';
/**
 * Single signer factor API response.
 */
class SignerFactorResponse extends base_record_response_1.BaseRecordResponse {
    /**
     * Record data extracted from the `data` property of the response body.
     */
    factor;
    constructor(response) {
        super(response);
        this.factor = response?.data?.data;
    }
}
exports.SignerFactorResponse = SignerFactorResponse;
/**
 * Signer factors list API response.
 */
class SignerFactorsResponse extends list_response_1.BaseListResponse {
    /**
     * A flattened list of records, extracted from the `data` property of
     * each record returned.
     */
    factors;
    constructor(response) {
        super(response);
        this.factors = response?.data?.data?.map((record) => record.data);
    }
}
exports.SignerFactorsResponse = SignerFactorsResponse;
/**
 * Allows querying signer factors.
 * @see {LedgerFactor}
 */
class SignerFactorClient extends base_client_1.BaseClient {
    options;
    parentPath;
    /**
     * Allows querying changes.
     */
    change;
    /**
     * Allows checking access.
     */
    access;
    /**
     * Allows revealing secret.
     */
    secret;
    constructor(options, parentPath) {
        super(options);
        this.options = options;
        this.parentPath = parentPath;
    }
    /**
     * Sets parent client record id to context. Overrides baseClient
     * so we can use the dynamic buildBasePath method in the clients.
     * @param id parent id
     */
    setParentId(id) {
        super.setParentId(id);
        const options = {
            apiClient: this.apiClient,
            secure: this.secure,
            headers: this.headers,
            ledger: this.getActiveLedger(),
        };
        this.change = new base_change_client_1.BaseChangeClient(options, this.buildBasePath());
        this.access = new access_client_1.AccessClient(options, this.buildBasePath());
        this.secret = new secret_client_1.SecretClient(options, this.buildBasePath());
        this.links = [this.change, this.access, this.secret];
    }
    buildBasePath() {
        const address = this.assertParentId();
        return `${this.parentPath}/${encodeURIComponent(address)}/${SIGNER_FACTOR_PATH}`;
    }
    /**
     * Initializes a builder instance that supports chaining to make it
     * easier to work with ledger records. You can pass the record
     * payload to this method to use as initial content, this is useful
     * when you already have an object ready, for example when validating
     * API responses or modifying an existing record. An empty record is
     * going to be created if no initial data is provided.
     * @see {LedgerFactor}
     * @see {SignerRecordBuilder}
     * @param record partial of record payload
     * @returns a builder instance
     */
    init(record) {
        const builder = new create_record_builder_1.CreateRecordBuilder(async (record, reqOptions) => {
            return this.createRecord(this.buildBasePath(), SignerFactorResponse, record, reqOptions);
        });
        record = lodash_1.default.cloneDeep(record);
        return builder.init(record);
    }
    /**
     * Initializes a builder instance for updating existing records.
     * The builder supports chaining to make it easier to work with
     * ledger records. You can pass the existing record payload to
     * this method to use as initial content.
     * @see {LedgerFactor}
     * @see {UpdateRecordBuilder}
     * @param record initial record payload
     * @returns a builder instance
     */
    from(record) {
        const builder = new update_record_builder_1.UpdateRecordBuilder(async (record, reqOptions) => {
            return this.updateRecord(`${this.buildBasePath()}/${encodeURIComponent(record.data.handle)}`, SignerFactorResponse, record, reqOptions);
        }, async (proof, reqOptions) => {
            return this.signRecord(`${this.buildBasePath()}/${encodeURIComponent(record.data.handle)}/proofs`, SignerFactorResponse, proof, reqOptions);
        });
        record = lodash_1.default.cloneDeep(record);
        return builder.init(record);
    }
    /**
     * Gets a ledger signer factor by identifier (luid or handle).
     * @see {LedgerFactor}
     * @throws {Error} if the signer factor doesn't exist or the
     *   current user doesn't have access to this signer factor
     * @param id a unique signer factor identifier
     * @param authParams optional authentication parameters
     * @returns a single signer factor response with the requested signer factor
     */
    async read(id, options) {
        return this.getRecord(`${this.buildBasePath()}/${encodeURIComponent(id)}`, SignerFactorResponse, options);
    }
    /**
     * Queries signer factors from a ledger.
     * @see {LedgerFactor}
     * @param params query parameters
     * @returns signer factors list response with all found wallets
     */
    async list(params) {
        return this.getRecordsList(this.buildBasePath(), SignerFactorsResponse, params);
    }
    /**
     * Initializes a builder instance that supports chaining to make it
     * easier to work with ledger records. You can pass the record
     * payload to this method to use as initial content, this is useful
     * when you already have an object ready, for example when validating
     * API responses or modifying an existing record. An empty record is
     * going to be created if no initial data is provided.
     *
     * @see {LedgerFactor}
     * @see {DropRecordBuilder}
     * @param id signer identifier (optional)
     * @returns a builder instance
     */
    drop(id) {
        const factorIdentifier = id || this.id;
        const builder = new drop_record_builder_1.DropRecordBuilder(async (record, reqOptions) => {
            return this.dropRecord(`${this.buildBasePath()}/${encodeURIComponent(factorIdentifier)}`, record, reqOptions);
        }, async (readOptions) => {
            const response = await this.read(factorIdentifier, readOptions);
            return {
                data: response.factor,
                hash: response.hash,
                luid: response.luid,
                meta: response.meta,
            };
        });
        return builder.init();
    }
}
exports.SignerFactorClient = SignerFactorClient;
//# sourceMappingURL=signer-factor-client.js.map