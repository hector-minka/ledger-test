"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SymbolClient = exports.SymbolsResponse = exports.SymbolResponse = void 0;
const lodash_1 = __importDefault(require("lodash"));
const access_client_1 = require("../common/clients/access-client");
const base_change_client_1 = require("../common/clients/base-change-client");
const base_client_1 = require("../common/clients/base-client");
const create_record_builder_1 = require("../common/services/create-record-builder");
const update_record_builder_1 = require("../common/services/update-record-builder");
const base_record_response_1 = require("../common/types/base-record-response");
const list_response_1 = require("../common/types/list-response");
const SYMBOLS_PATH = '/symbols';
/**
 * Single symbol API response.
 */
class SymbolResponse extends base_record_response_1.BaseRecordResponse {
    /**
     * Record data extracted from the `data` property of the response body.
     */
    symbol;
    constructor(response) {
        super(response);
        this.symbol = response?.data?.data;
    }
}
exports.SymbolResponse = SymbolResponse;
/**
 * Symbols list API response.
 */
class SymbolsResponse extends list_response_1.BaseListResponse {
    /**
     * A flattened list of records, extracted from the `data` property of
     * each record returned.
     */
    symbols;
    constructor(response) {
        super(response);
        this.symbols = response?.data?.data?.map((record) => record.data);
    }
}
exports.SymbolsResponse = SymbolsResponse;
/**
 * Allows querying and managing symbols.
 *
 * @see {LedgerSymbol}
 */
class SymbolClient extends base_client_1.BaseClient {
    /**
     * Allows querying changes.
     *
     */
    change;
    /**
     * Allows checking access.
     *
     */
    access;
    constructor(options) {
        super(options);
        this.change = new base_change_client_1.BaseChangeClient(options, SYMBOLS_PATH);
        this.access = new access_client_1.AccessClient(options, SYMBOLS_PATH);
        this.links = [this.change, this.access];
    }
    /**
     * Initializes a builder instance that supports chaining to make it
     * easier to work with ledger records. You can pass the record
     * payload to this method to use as initial content, this is useful
     * when you already have an object ready, for example when validating
     * API responses or modifying an existing record. An empty record is
     * going to be created if no initial data is provided.
     *
     * @see {LedgerSymbol}
     * @see {CreateRecordBuilder}
     * @param options.record initial record payload (optional)
     * @param options.handle specify handle to be updated, if any (optional)
     * @returns a builder instance
     */
    init(record) {
        const builder = new create_record_builder_1.CreateRecordBuilder(async (record, reqOptions) => {
            return this.createRecord(SYMBOLS_PATH, SymbolResponse, record, reqOptions);
        });
        record = lodash_1.default.cloneDeep(record);
        return builder.init(record);
    }
    /**
     * Initializes a builder instance for updating existing records.
     * The builder supports chaining to make it easier to work with
     * ledger records. You can pass the existing record payload to
     * this method to use as initial content.
     *
     * @see {LedgerSymbol}
     * @see {UpdateRecordBuilder}
     * @param record initial record payload
     * @returns a builder instance
     */
    from(record) {
        const builder = new update_record_builder_1.UpdateRecordBuilder(async (record, reqOptions) => {
            return this.updateRecord(`${SYMBOLS_PATH}/${encodeURIComponent(record.data.handle)}`, SymbolResponse, record, reqOptions);
        }, async (proof, reqOptions) => {
            return this.signRecord(`${SYMBOLS_PATH}/${encodeURIComponent(record.data.handle)}/proofs`, SymbolResponse, proof, reqOptions);
        });
        record = lodash_1.default.cloneDeep(record);
        return builder.init(record);
    }
    /**
     * Gets a ledger symbol by identifier (luid or handle).
     *
     * @see {LedgerSymbol}
     * @throws {Error} if the symbol doesn't exist or the
     *   current user doesn't have access to this symbol
     * @param id a unique symbol handle
     * @returns a single symbol response with the requested symbol
     */
    async read(id, options) {
        return this.getRecord(`${SYMBOLS_PATH}/${encodeURIComponent(id)}`, SymbolResponse, options);
    }
    /**
     * Queries symbols from a ledger.
     *
     * @see {LedgerSymbol}
     * @param params query parameters
     * @returns symbols list response with all found symbols
     */
    async list(params) {
        return this.getRecordsList(SYMBOLS_PATH, SymbolsResponse, params);
    }
}
exports.SymbolClient = SymbolClient;
//# sourceMappingURL=symbol-client.js.map