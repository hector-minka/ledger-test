/**
 * @module Clients / Circle Signers
 * @category Entities
 */
import { AxiosResponse } from 'axios';
import { LedgerAnchor, LedgerPagedList, LedgerRecord } from "../../../types/src";
import { BaseClient, BaseClientOptions } from '../common/clients/base-client';
import { LookupRecordBuilder } from '../common/services/lookup-record-builder';
import { BaseListResponse } from '../common/types/list-response';
/**
 * Wallet anchors lookup list API response.
 */
export declare class WalletAnchorsLookupResponse extends BaseListResponse<Partial<LedgerAnchor>> {
    anchors: Partial<LedgerAnchor>[];
    constructor(response: AxiosResponse<LedgerPagedList<Partial<LedgerAnchor>>, void>);
}
/**
 * Allows querying wallet anchors.
 *
 * @see {LedgerAnchor}
 */
export declare class WalletAnchorClient extends BaseClient {
    private parentPath;
    constructor(options: BaseClientOptions, parentPath: string);
    private buildBasePath;
    /**
     * Initializes a builder instance that supports chaining to make it
     * easier to work with ledger records. You can pass the record
     * payload to this method to use as initial content, this is useful
     * when you already have an object ready, for example when validating
     * API responses or modifying an existing record. An empty record is
     * going to be created if no initial data is provided.
     *
     * @see {LedgerAnchor}
     * @see {LookupRecordBuilder}
     * @param record initial record payload (optional)
     * @returns a builder instance
     */
    lookup(record?: Partial<LedgerRecord<Partial<LedgerAnchor>>>): LookupRecordBuilder<Partial<LedgerAnchor>, WalletAnchorsLookupResponse, import("../../../types/src").LedgerMeta>;
}
