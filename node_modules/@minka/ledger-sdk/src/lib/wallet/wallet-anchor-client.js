"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletAnchorClient = exports.WalletAnchorsLookupResponse = void 0;
const lodash_1 = __importDefault(require("lodash"));
const base_client_1 = require("../common/clients/base-client");
const lookup_record_builder_1 = require("../common/services/lookup-record-builder");
const list_response_1 = require("../common/types/list-response");
const WALLET_ANCHOR_PATH = 'anchors';
/**
 * Wallet anchors lookup list API response.
 */
class WalletAnchorsLookupResponse extends list_response_1.BaseListResponse {
    anchors;
    constructor(response) {
        super(response);
        this.anchors = response?.data?.data?.map((record) => record.data);
    }
}
exports.WalletAnchorsLookupResponse = WalletAnchorsLookupResponse;
/**
 * Allows querying wallet anchors.
 *
 * @see {LedgerAnchor}
 */
class WalletAnchorClient extends base_client_1.BaseClient {
    parentPath;
    constructor(options, parentPath) {
        super(options);
        this.parentPath = parentPath;
    }
    buildBasePath() {
        const address = this.assertParentId();
        return `${this.parentPath}/${encodeURIComponent(address)}/${WALLET_ANCHOR_PATH}`;
    }
    /**
     * Initializes a builder instance that supports chaining to make it
     * easier to work with ledger records. You can pass the record
     * payload to this method to use as initial content, this is useful
     * when you already have an object ready, for example when validating
     * API responses or modifying an existing record. An empty record is
     * going to be created if no initial data is provided.
     *
     * @see {LedgerAnchor}
     * @see {LookupRecordBuilder}
     * @param record initial record payload (optional)
     * @returns a builder instance
     */
    lookup(record) {
        const builder = new lookup_record_builder_1.LookupRecordBuilder(async (record, reqOptions) => {
            return this.lookupRecord(this.buildBasePath() + '/!lookup', WalletAnchorsLookupResponse, record, reqOptions);
        });
        record = lodash_1.default.cloneDeep(record);
        return builder.init(record);
    }
}
exports.WalletAnchorClient = WalletAnchorClient;
//# sourceMappingURL=wallet-anchor-client.js.map