import { LedgerHash } from '../common/ledger-hash';
import { LedgerMeta } from '../common/ledger-meta';
import { LedgerRecord } from './ledger-record';
/**
 * A generic data structure for all ledger lists. This
 * data structure defines root properties that are shared
 * by all lists. Each list contains a `data` array that is
 * used to carry specific ledger records. Ledger records
 * returned in the data array use the identical format as
 * if they are retrieved individually, for example by handle.
 */
export type LedgerList<TData extends Record<string, any>, TMeta extends LedgerMeta = LedgerMeta> = {
    /**
     * Hash of the response. Only data property is hashed.
     */
    hash: LedgerHash;
    /**
     * Payload of the response, an array of ledger records.
     */
    data: LedgerRecord<TData, TMeta>[];
    /**
     * Metadata of the response. In case a signed response is
     * returned, this property is going to contain signatures.
     */
    meta: LedgerMeta;
};
