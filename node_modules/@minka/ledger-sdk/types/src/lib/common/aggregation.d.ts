/**
 * Defines generic type with aggregation
 * operators.
 *
 */
export type InAggregation<T> = {
    /**
     * At least one of the items should be fulfilled
     */
    $in: Array<T>;
};
export type NinAggregation<T> = {
    /**
     * Specified field value should not be included in the list
     */
    $nin: Array<T>;
};
export type Aggregation<T> = InAggregation<T> | NinAggregation<T>;
/**
 * Defines regex match
 */
export type RegexMatch = {
    /**
     * Item must match regex
     */
    $regex: string;
};
/**
 * Removes the first or the last element from an array
 *
 * @example  $pop: 1 = removes item from the end of the list
 *
 * @example  $pop: -1 = removes item from the beginning of the list
 */
export type Pop = {
    $pop: PopValue;
};
export declare enum PopValue {
    Start = -1,
    End = 1
}
/**
 * Base operations for transforming an array
 */
export type ArrayTransformer = {
    $slice?: number;
    $sort?: SortValue;
};
/**
 * Appends specified items to an array.
 *
 */
export type Push<T> = {
    $push: T | PushAggregation<T>;
};
export type PushAggregation<T> = ArrayTransformer & {
    $each: T[];
    $position?: number;
};
export declare enum SortValue {
    Asc = 1,
    Desc = -1
}
/**
 * Appends specified item(s) to an array unless
 * it's not present already
 */
export type AddToSet<T> = {
    $addToSet: T | PushAggregation<T>;
};
/**
 * Removes specified items from an array
 */
export type Pull<T> = {
    $pull: T | PullAggregation<T>;
};
export type PullAggregation<T> = ArrayTransformer & {
    $in: T[];
    $sort?: SortValue;
};
/**
 * Removes all specified items from an array
 */
export type PullAll<T> = {
    $pullAll: T[];
};
