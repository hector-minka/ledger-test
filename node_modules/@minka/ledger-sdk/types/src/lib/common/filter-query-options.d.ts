import { ExcludedTypes, FlattenObject } from './flatten-object';
type FilterOptions<EntityType> = {
    [Key in keyof EntityType]?: EntityType[Key] extends ExcludedTypes ? FilterOperators<EntityType[Key]> : EntityType[Key] extends object ? FilterOptions<EntityType[Key]> | FilterOperators<EntityType[Key]> : FilterOperators<EntityType[Key]>;
};
/**
 * Defines supported operators for filtering.
 */
type OperatorShape<ValueType = unknown> = {
    $lte: ValueType;
    $gte: ValueType;
    $lt: ValueType;
    $gt: ValueType;
    $eq: ValueType;
    $regex: string;
    $ne: ValueType;
    $in: ValueType[];
    $nin: ValueType[];
    $isNull: boolean;
};
type OperatorKeys = keyof OperatorShape<any>;
declare const OPERATOR_KEYS: (keyof OperatorShape)[];
type FilterOperators<ValueType, ExcludeOperatorKeys extends keyof OperatorShape<unknown> = never> = Partial<Exclude<OperatorShape<ValueType>, ExcludeOperatorKeys>> | ValueType;
type ContainsOperatorKey<T extends string> = T extends `${infer _Start}${OperatorKeys}${infer _End}` ? true : false;
type ExcludeOperatorKeys<T> = {
    [K in keyof T as ContainsOperatorKey<K & string> extends true ? never : K]: T[K];
};
/**
 * Type that specifies possible filters for a given entity type.
 * To be used when building queries internally, e.g. we'd use `FilterQueryOptions<IntentEntity>` for an intent query.
 */
type FilterQueryOptions<EntityType> = Partial<ExcludeOperatorKeys<FlattenObject<FilterOptions<EntityType>>>> & Record<string, unknown>;
type ContainsOperatorKeyInMiddle<T extends string> = T extends `${infer _Start}${OperatorKeys}${infer _Middle}${infer _End}` ? true : false;
type ExternalExcludeOperatorKeys<T> = {
    [K in keyof T as ContainsOperatorKeyInMiddle<K & string> extends true ? never : K]: T[K];
};
/**
 * Type that specifies possible filters for a given record type.
 * To be used when building queries meant to be sent over API, e.g. we'd use `ExternalFilterQueryOptions<IntentRecord>` for an intent query.
 * Due to Typescript performance limitations, does not include type checking and autocomplete for array items.
 */
type ExternalFilterQueryOptions<RecordType> = Partial<ExternalExcludeOperatorKeys<FlattenObject<FilterOptions<RecordType>>>>;
export { ExternalFilterQueryOptions, FilterOperators, FilterQueryOptions, OPERATOR_KEYS, OperatorShape, };
/**
 * Generic type for taking properties from other types and allowing to apply
 * filter operators on them based on the type of the property.
 * For string and numbers, operators available are $lte, $gte, $lt, $gt, $eq, $regex, $ne.
 * For booleans, operators available are $eq, $ne.
 * For arrays, operators available are $in, $nin, $eq, $ne.
 * For objects, operators available are $eq, $ne.
 *
 * The first type parameter is the type, the second type parameter is a union of keys
 * that should be allowed to be filtered.
 */
export type QueryForRecord<TRecord, Keys extends keyof TRecord> = {
    [K in Keys]?: TRecord[K] extends string | number ? FilterOperators<TRecord[K]> : TRecord[K] extends boolean ? TRecord[K] | {
        $eq?: TRecord[K];
        $ne?: TRecord[K];
        $isNull?: boolean;
    } : TRecord[K] extends Array<unknown> ? TRecord[K] | {
        $in?: TRecord[K];
        $nin?: TRecord[K];
        $eq?: TRecord[K];
        $ne?: TRecord[K];
        $isNull?: boolean;
    } : TRecord[K] | {
        $eq?: TRecord[K];
        $ne?: TRecord[K];
        $isNull?: boolean;
    };
};
