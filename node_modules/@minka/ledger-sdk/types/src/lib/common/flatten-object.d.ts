/**
 * Flattens object types to a single level object, where types like `{ data: { person: { age: number } } }` are converted to:
 * ```
 * {
 *  'data': { person: { age: number } },
 *  'data.person': { age: number }
 *  'data.person.age': number
 * }
 * ```
 */
type FlattenObject<TValue> = CollapseEntries<CreateObjectEntries<TValue, TValue>>;
type Entry = {
    key: string;
    value: unknown;
};
type EmptyEntry<TValue> = {
    key: '';
    value: TValue;
};
type ExcludedTypes = Date | Set<unknown> | Map<unknown, unknown>;
type ArrayEncoder = `[${bigint}]`;
type EscapeArrayKey<TKey extends string> = TKey extends `${infer TKeyBefore}.${ArrayEncoder}${infer TKeyAfter}` ? EscapeArrayKey<`${TKeyBefore}${ArrayEncoder}${TKeyAfter}`> : TKey;
type CollapseEntries<TEntry extends Entry> = {
    [E in TEntry as EscapeArrayKey<E['key']>]: E['value'];
};
type CreateArrayEntry<TValue, TValueInitial> = OmitItself<TValue extends unknown[] ? {
    [k: ArrayEncoder]: TValue[number];
} : TValue, TValueInitial>;
type OmitItself<TValue, TValueInitial> = TValue extends TValueInitial ? EmptyEntry<TValue> : OmitExcludedTypes<TValue, TValueInitial>;
type OmitExcludedTypes<TValue, TValueInitial> = TValue extends ExcludedTypes ? EmptyEntry<TValue> : CreateObjectEntries<TValue, TValueInitial>;
type NonUnderscoreString<T extends string> = T extends `_${string}` ? never : T;
type StringKeys<T> = Extract<keyof T, string>;
type NestedValue<TValue, TKey extends StringKeys<TValue>, TValueInitial> = CreateArrayEntry<TValue[TKey], TValueInitial> extends infer TNestedValue ? TNestedValue extends Entry ? TNestedValue['key'] extends '' ? {
    key: TKey;
    value: TNestedValue['value'];
} : {
    key: `${TKey}.${TNestedValue['key']}`;
    value: TNestedValue['value'];
} | {
    key: TKey;
    value: TValue[TKey];
} : never : never;
type ValidKey<TValue, TKey extends StringKeys<TValue>, TValueInitial> = TKey extends NonUnderscoreString<TKey> ? NestedValue<TValue, TKey, TValueInitial> : never;
type CreateObjectEntries<TValue, TValueInitial> = TValue extends object ? {
    [TKey in StringKeys<TValue>]-?: ValidKey<TValue, TKey, TValueInitial>;
}[StringKeys<TValue>] : EmptyEntry<TValue>;
export { ExcludedTypes, FlattenObject };
