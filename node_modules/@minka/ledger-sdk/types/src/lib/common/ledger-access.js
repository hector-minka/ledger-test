"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvokeRecordAlternatives = exports.AccessInvokes = exports.AccessIntentInvokes = exports.AccessWalletInvokes = exports.AccessIntentInvoke = exports.AccessWalletInvoke = exports.AccessActions = exports.AccessAction = exports.AccessRecords = exports.AccessRecord = exports.AccessRecordOwnerships = exports.AccessRecordOwnership = void 0;
var AccessRecordOwnership;
(function (AccessRecordOwnership) {
    AccessRecordOwnership["Owner"] = "owner";
})(AccessRecordOwnership || (exports.AccessRecordOwnership = AccessRecordOwnership = {}));
exports.AccessRecordOwnerships = Object.values(AccessRecordOwnership);
/**
 *  Defines the record class affected by the access rule.
 *
 * `Any` indicates the rule is meant to be applied
 * to every ledger record class: ledger, signer, symbol,
 * wallet, intent, and effect.
 */
var AccessRecord;
(function (AccessRecord) {
    AccessRecord["Anchor"] = "anchor";
    AccessRecord["AnchorProof"] = "anchor-proof";
    AccessRecord["Any"] = "any";
    AccessRecord["Bridge"] = "bridge";
    AccessRecord["BridgeProof"] = "bridge-proof";
    AccessRecord["Circle"] = "circle";
    AccessRecord["CircleProof"] = "circle-proof";
    AccessRecord["CircleSigner"] = "circle-signer";
    AccessRecord["Domain"] = "domain";
    AccessRecord["DomainProof"] = "domain-proof";
    AccessRecord["Effect"] = "effect";
    AccessRecord["EffectProof"] = "effect-proof";
    AccessRecord["Intent"] = "intent";
    AccessRecord["IntentProof"] = "intent-proof";
    AccessRecord["Ledger"] = "ledger";
    AccessRecord["LedgerProof"] = "ledger-proof";
    AccessRecord["Policy"] = "policy";
    AccessRecord["PolicyProof"] = "policy-proof";
    AccessRecord["Report"] = "report";
    AccessRecord["ReportProof"] = "report-proof";
    AccessRecord["Request"] = "request";
    AccessRecord["Schema"] = "schema";
    AccessRecord["SchemaProof"] = "schema-proof";
    AccessRecord["Server"] = "server";
    AccessRecord["Signer"] = "signer";
    AccessRecord["SignerProof"] = "signer-proof";
    AccessRecord["SignerFactor"] = "signer-factor";
    AccessRecord["SignerFactorProof"] = "signer-factor-proof";
    AccessRecord["SignerFactorSecret"] = "signer-factor-secret";
    AccessRecord["Symbol"] = "symbol";
    AccessRecord["SymbolProof"] = "symbol-proof";
    AccessRecord["Wallet"] = "wallet";
    AccessRecord["WalletProof"] = "wallet-proof";
})(AccessRecord || (exports.AccessRecord = AccessRecord = {}));
exports.AccessRecords = Object.values(AccessRecord);
/**
 * Defines which action is affected by the access rule.
 *
 * `Any` indicates that both `Create` and `Read` actions
 * will be affected by this rule
 */
var AccessAction;
(function (AccessAction) {
    AccessAction["Abort"] = "abort";
    AccessAction["Access"] = "access";
    AccessAction["Activate"] = "activate";
    AccessAction["Any"] = "any";
    AccessAction["AssignSigner"] = "assign-signer";
    AccessAction["Commit"] = "commit";
    AccessAction["Create"] = "create";
    AccessAction["Destroy"] = "destroy";
    AccessAction["Drop"] = "drop";
    AccessAction["Issue"] = "issue";
    AccessAction["Limit"] = "limit";
    AccessAction["Lookup"] = "lookup";
    AccessAction["Manage"] = "manage";
    AccessAction["Query"] = "query";
    AccessAction["Read"] = "read";
    AccessAction["RemoveSigner"] = "remove-signer";
    AccessAction["Spend"] = "spend";
    AccessAction["Update"] = "update";
    AccessAction["Reveal"] = "reveal";
})(AccessAction || (exports.AccessAction = AccessAction = {}));
exports.AccessActions = Object.values(AccessAction);
/**
 * Built-in functions that can be
 * attached to wallet access rules.
 */
var AccessWalletInvoke;
(function (AccessWalletInvoke) {
    AccessWalletInvoke["CanSpendAllChangedRouteTargets"] = "wallet.canSpendAllChangedRouteTargets";
})(AccessWalletInvoke || (exports.AccessWalletInvoke = AccessWalletInvoke = {}));
/**
 * Built-in functions that can be
 * attached to intent rules.
 */
var AccessIntentInvoke;
(function (AccessIntentInvoke) {
    AccessIntentInvoke["CanReadAnyClaimWallet"] = "intent.canReadAnyClaimWallet";
    AccessIntentInvoke["CanReadAnyClaimWalletInThread"] = "intent.canReadAnyClaimWalletInThread";
    AccessIntentInvoke["CanSpendEveryClaimWallet"] = "intent.canSpendEveryClaimWallet";
    AccessIntentInvoke["CanSpendAnyClaimWallet"] = "intent.canSpendAnyClaimWallet";
    AccessIntentInvoke["CanSpendAnyClaimWalletInThread"] = "intent.canSpendAnyClaimWalletInThread";
})(AccessIntentInvoke || (exports.AccessIntentInvoke = AccessIntentInvoke = {}));
exports.AccessWalletInvokes = Object.values(AccessWalletInvoke);
exports.AccessIntentInvokes = Object.values(AccessIntentInvoke);
exports.AccessInvokes = [...exports.AccessWalletInvokes, ...exports.AccessIntentInvokes];
/**
 * Correlates Access records with their invoke alternatives.
 */
exports.InvokeRecordAlternatives = {
    [AccessRecord.Wallet]: exports.AccessWalletInvokes,
    [AccessRecord.Intent]: exports.AccessIntentInvokes,
    [AccessRecord.IntentProof]: exports.AccessIntentInvokes,
};
//# sourceMappingURL=ledger-access.js.map