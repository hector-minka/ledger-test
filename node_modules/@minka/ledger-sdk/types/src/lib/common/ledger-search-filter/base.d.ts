import { OperatorShape } from '../filter-query-options';
import { LedgerHandle } from '../ledger-handle';
import { LedgerLabel } from '../ledger-label';
/**
 * Defines suffixes that can be placed at the end of search filters. Must be in line with supported operator types.
 */
type OperatorSuffixes = `.${keyof Omit<OperatorShape<any>, '$isNull' | '$in' | '$nin' | '$regex'>}`;
/**
 * Modifies a type by allowing appending of suffixes for search operators, e.g. adding a suffix like `.$in` to the key.
 */
type AppendSuffixes<BaseType, Suffixes extends string> = {
    [K in keyof BaseType as `${string & K}${Suffixes}`]: Suffixes extends '.$in' ? BaseType[K][] : BaseType[K];
};
/**
 * Defines searchable fields for given type, with support for the default $eq operator left empty, and explicit suffixes for all operators.
 */
type SearchableFields<BaseFields> = BaseFields & AppendSuffixes<Omit<BaseFields, '$text.$search'>, OperatorSuffixes> & {
    [K in keyof BaseFields as `${string & K}.$isNull`]: boolean;
} & {
    [K in keyof BaseFields as `${string & K}.$in`]: BaseFields[K][];
} & {
    [K in keyof BaseFields as `${string & K}.$nin`]: BaseFields[K][];
} & {
    [K in keyof BaseFields as `${string & K}.$regex`]: string;
};
/**
 * Defines searchable fields that should be shared between all base entities.
 */
type DefaultBaseSearchableFields = {
    'meta.moment': Date;
    'meta.labels': LedgerLabel;
    'meta.status': string;
    'data.handle': LedgerHandle;
};
type DefaultSearchableFields = Partial<SearchableFields<DefaultBaseSearchableFields>>;
export { DefaultBaseSearchableFields, DefaultSearchableFields, OperatorSuffixes, SearchableFields, };
