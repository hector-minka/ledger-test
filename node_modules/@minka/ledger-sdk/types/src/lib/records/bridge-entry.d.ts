import { LedgerAddress } from '../common/ledger-address';
import { LedgerHandle } from '../common/ledger-handle';
import { LedgerLuid } from '../common/ledger-luid';
import { LedgerReference } from '../common/ledger-reference';
import { IntentRecord } from './ledger-intent';
export declare enum BridgeEntrySchema {
    Debit = "debit",
    Credit = "credit"
}
export declare enum BridgeEntryStatus {
    Prepared = "prepared",
    Failed = "failed",
    Committed = "committed",
    Aborted = "aborted"
}
export type BridgeEntrySymbol = LedgerReference;
export type BridgeEntryAddress = LedgerReference<LedgerAddress>;
export type BridgeEntry = {
    luid: LedgerLuid;
    handle: LedgerHandle;
    schema: BridgeEntrySchema;
    symbol: BridgeEntrySymbol;
    source?: BridgeEntryAddress;
    target?: BridgeEntryAddress;
    amount: number;
    intent: IntentRecord;
    inputs?: number[];
};
export declare enum BridgeCommandAction {
    Commit = "commit",
    Abort = "abort"
}
export type BridgeCommand = {
    handle: LedgerHandle;
    action: BridgeCommandAction;
    intent: IntentRecord;
};
