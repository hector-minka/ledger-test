"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegacyBridgeTrait = exports.BridgeTraits = exports.BridgeTrait = exports.BridgeClaimGrouping = void 0;
/**
 * Determines how bridge calls for claims are grouped in case multiple claims of
 * one intent are addressed to the same bridge.
 */
var BridgeClaimGrouping;
(function (BridgeClaimGrouping) {
    /**
     * With this option, claims will be grouped by exact address of `target.handle` of the claims.
     *
     * If there are multiple claims with the same target address,
     * they will be grouped into single credit entry sent to a target bridge.
     */
    BridgeClaimGrouping["address"] = "address";
    /**
     * With this option, claims will be grouped by the actual wallet resolved as target of the address
     * from `target.handle`
     *
     * If there are multiple claims with different `target.handle`,
     * but they get resolved to the same target wallet (e.g. because of wallet parent hierarchy),
     * these claims will be grouped together.
     *
     * Of course, if the `target.handle` is the same, then the claims will also be grouped together,
     * just like they would have with the `address` grouping setting.
     */
    BridgeClaimGrouping["wallet"] = "wallet";
})(BridgeClaimGrouping || (exports.BridgeClaimGrouping = BridgeClaimGrouping = {}));
/**
 * Features of a bridge.
 */
var BridgeTrait;
(function (BridgeTrait) {
    BridgeTrait["Debits"] = "debits";
    BridgeTrait["Credits"] = "credits";
    /**
     * Can receive intent status calls
     */
    BridgeTrait["Statuses"] = "statuses";
    BridgeTrait["Anchors"] = "anchors";
    BridgeTrait["Domains"] = "domains";
    BridgeTrait["Effects"] = "effects";
})(BridgeTrait || (exports.BridgeTrait = BridgeTrait = {}));
exports.BridgeTraits = Object.values(BridgeTrait);
/**
 * Legacy bridge features mapped to their newest versions.
 * If a bridge has a legacy trait enabled, its corresponding
 * non-legacy trait is also considered to be enabled.
 */
exports.LegacyBridgeTrait = {
    [BridgeTrait.Effects]: 'events',
};
// ^^^^^^^^^^^^^^
// TODO(Omar): We should support this for all filters.
// It basically extends LedgerFilter to support Mingo operators.
// Related to:
// https://linear.app/minka/issue/LDG-1097/fully-support-mongo-queries-in-filter-properties
//# sourceMappingURL=ledger-bridge.js.map