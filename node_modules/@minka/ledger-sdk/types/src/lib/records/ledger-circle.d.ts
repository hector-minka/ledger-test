import { LedgerRecord } from '../base/ledger-record';
import { LedgerAccess } from '../common/ledger-access';
import { LedgerCustom } from '../common/ledger-custom';
import { LedgerBaseData } from '../common/ledger-data';
import { LedgerHandle } from '../common/ledger-handle';
/**
 * Circles describes roles or groups that can used
 * to gather signers and ease access rules management.
 */
export type LedgerCircle = LedgerBaseData & {
    /**
     * A handle that uniquely identifies a circle.
     */
    handle: LedgerHandle;
    /**
     * The schema used to validate this circle. This is mandatory
     * if there is at least one schema defined for the record
     * type `circle`.
     */
    schema?: LedgerHandle;
    /**
     * Custom metadata that can be stored alongside a circle
     * definition.
     */
    custom?: LedgerCustom;
    /**
     * Access control rules to define who can control or manage
     * a circle.
     */
    access?: LedgerAccess;
};
export type CircleRecord = LedgerRecord<LedgerCircle>;
/**
 * Represents a relationship between a circle and a signer.
 */
export type LedgerCircleSigner = Omit<LedgerBaseData, 'access'> & {
    /**
     * A circle this relationship belongs to.
     * @see LedgerCircle
     */
    circle: LedgerHandle;
    /**
     * A signer this relationship belongs to.
     * @see LedgerSigner
     */
    signer: LedgerHandle;
    /**
     * Custom metadata that can be stored alongside a circle-signer
     * relationship definition.
     */
    custom?: LedgerCustom;
};
export type CircleSignerRecord = LedgerRecord<LedgerCircleSigner>;
