import { LedgerRecord } from '../base/ledger-record';
import { LedgerAccess } from '../common/ledger-access';
import { LedgerCustom } from '../common/ledger-custom';
import { LedgerBaseData } from '../common/ledger-data';
import { LedgerHandle } from '../common/ledger-handle';
/**
 * A domain represents a namespace in the ledger.
 * Domains can contain other ledger records and are
 * a way to achieve data separation in the ledger.
 *
 * Domain is identified by a suffix in the handle,
 * everything after an `@` sign represents a domain
 * name.
 *
 * A record belongs to a domain if it has a domain name
 * as part of its handle (something@<domain handle>) or
 * if a domain is assigned to it using a proof.
 *
 * Domain records are optional, if they are not present
 * the ledger will not enforce strict domain topology and
 * any domain can be used when creating records. Once a
 * first domain is created, ledger starts validating domain
 * names and records can be placed only in one of the
 * existing domains.
 *
 * Each domain can have access rules which are evaluated
 * as part of the security rules hierarchy after the ledger
 * rules and before any other record rules, for example the
 * access rules hierarchy is as follows:
 * ledger -> domain -> record
 */
export type LedgerDomain = LedgerBaseData & {
    /**
     * Domain handle or identifier, handle is used to
     * identify a domain. A domain handle cannot contain
     * an `@` character.
     */
    handle: LedgerHandle;
    /**
     * The schema used to validate this domain. This is mandatory
     * if there is at least one schema defined for the record
     * type `domain`.
     */
    schema?: LedgerHandle;
    /**
     * Custom metadata, this object can hold any
     * additional data that could be useful to end users
     * or ledger plugins to work with domains.
     */
    custom?: LedgerCustom;
    /**
     * Determines access controls of a domain. This field
     * can be used to define access to either the domain
     * record itself or to records which are part of that
     * domain.
     *
     * Access is optional in case domains are dynamically
     * determined from records
     */
    access?: LedgerAccess;
};
export type DomainRecord = LedgerRecord<LedgerDomain>;
