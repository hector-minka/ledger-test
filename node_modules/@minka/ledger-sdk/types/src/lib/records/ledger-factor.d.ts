import { LedgerAccess } from '../common/ledger-access';
import { LedgerCustom } from '../common/ledger-custom';
import { LedgerBaseData } from '../common/ledger-data';
import { LedgerHandle } from '../common/ledger-handle';
/**
 * A signer factor defines a security layer for a
 * signer. It is used to define which factors can
 * be used with this signer and store the values
 * required to perform authentication checks.
 */
export type LedgerFactor = LedgerBaseData & {
    /**
     * Factor handle or identifier, handle is used to
     * identify a factor in our database.
     */
    handle: LedgerHandle;
    /**
     * The signer this factor is associated with. This
     * is a mandatory field and should be a valid
     * and existing signer handle.
     */
    signer: LedgerHandle;
    /**
     * The schema used to validate this factor. This is mandatory
     * if there is at least one schema defined for the record
     * type `signer-factor`.
     */
    schema?: LedgerHandle;
    /**
     * Custom metadata, this object can hold any
     * additional data that could be useful to end users
     * or ledger plugins to work with this factor.
     */
    custom?: LedgerCustom;
    /**
     * Determines access controls of a signer  factor. This
     * field can be used to limit updates, reads, etc.
     */
    access?: LedgerAccess;
};
