"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntentCommitModes = exports.IntentCommitMode = exports.IntentSignatureActions = exports.IntentSignatureAction = exports.LimitClaimMetrics = exports.LimitClaimMetric = exports.ClaimActions = exports.ClaimAction = exports.IntentStatus = void 0;
/**
 * Intent status represents the phase of intent processing.
 * - pending: initial status, executing preconditions, awaiting
 * for prepare confirmations from all involved bridges
 * - prepared: prepare confirmations from all involved bridges
 * are received
 * - committed: balance changes are committed to database,
 * awaiting for commit confirmations from all involved bridges
 * - completed: commit confirmations from all involved bridges
 * are received
 * - aborted: intent is aborted, it will not be committed
 * to database, awaiting for abort confirmations from all
 * involved bridges
 * - rejected: abort confirmations from all involved
 * bridges are received
 */
var IntentStatus;
(function (IntentStatus) {
    IntentStatus["Pending"] = "pending";
    IntentStatus["Prepared"] = "prepared";
    IntentStatus["Committed"] = "committed";
    IntentStatus["Completed"] = "completed";
    IntentStatus["Failed"] = "failed";
    IntentStatus["Aborted"] = "aborted";
    IntentStatus["Rejected"] = "rejected";
})(IntentStatus || (exports.IntentStatus = IntentStatus = {}));
/**
 * Describes the type of the action that will be performed.
 */
var ClaimAction;
(function (ClaimAction) {
    ClaimAction["Issue"] = "issue";
    ClaimAction["Transfer"] = "transfer";
    ClaimAction["Destroy"] = "destroy";
    ClaimAction["Limit"] = "limit";
})(ClaimAction || (exports.ClaimAction = ClaimAction = {}));
/**
 * All possible claim actions.
 */
exports.ClaimActions = Object.values(ClaimAction);
/**
 * All the metrics that can be limited.
 *
 * - MinBalance -> The minimum balance of a wallet.
 * - MaxBalance -> The maximum balance of a wallet.
 * - DailyCount -> The maximum number of transactions per day.
 * - DailyAmount -> The maximum amount of transactions per day.
 */
var LimitClaimMetric;
(function (LimitClaimMetric) {
    LimitClaimMetric["MinBalance"] = "minBalance";
    LimitClaimMetric["MaxBalance"] = "maxBalance";
    LimitClaimMetric["DailyCount"] = "dailyCount";
    LimitClaimMetric["DailyAmount"] = "dailyAmount";
})(LimitClaimMetric || (exports.LimitClaimMetric = LimitClaimMetric = {}));
exports.LimitClaimMetrics = Object.values(LimitClaimMetric);
// TODO(luis): Remove intent's config and commit mode
// from types as soon as clients stop using it
/**
 * Defines how the intent should be committed.
 * - 'auto' -> The intent is automatically committed after
 *             receiving all required signatures to prepare
 * - 'manual' -> The intent is suspended and will await
 *             for a trigger to commit or abort.
 */
/**
 * Action corresponding to the signature.
 */
var IntentSignatureAction;
(function (IntentSignatureAction) {
    IntentSignatureAction["Commit"] = "commit";
    IntentSignatureAction["Abort"] = "abort";
})(IntentSignatureAction || (exports.IntentSignatureAction = IntentSignatureAction = {}));
exports.IntentSignatureActions = Object.values(IntentSignatureAction);
var IntentCommitMode;
(function (IntentCommitMode) {
    IntentCommitMode["Auto"] = "auto";
    IntentCommitMode["Manual"] = "manual";
})(IntentCommitMode || (exports.IntentCommitMode = IntentCommitMode = {}));
exports.IntentCommitModes = Object.values(IntentCommitMode);
//# sourceMappingURL=ledger-intent.js.map