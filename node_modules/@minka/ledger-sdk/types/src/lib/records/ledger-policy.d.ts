import { LayoutValue } from '../base/ledger-layout';
import { LedgerRecord } from '../base/ledger-record';
import { InAggregation } from '../common/aggregation';
import { AccessRecord, AccessSigner, LedgerAccess, LedgerAccessRule } from '../common/ledger-access';
import { LedgerCustom } from '../common/ledger-custom';
import { LedgerBaseData } from '../common/ledger-data';
import { LedgerFilter } from '../common/ledger-filter';
import { LedgerHandle } from '../common/ledger-handle';
/**
 * Policies describes set of rules in a ledger. They can be access
 * rules that can be reused when defining record access as well
 * other types of rules.
 */
export type LedgerPolicy = LedgerBaseData & {
    /**
     * A handle that uniquely identifies a policy.
     */
    handle: LedgerHandle;
    /**
     * The schema used to validate this policy. This is mandatory
     * if there is at least one schema defined for the record
     * type `policy`.
     */
    schema?: LedgerHandle;
    /**
     * Custom metadata that can be stored alongside a policy
     * definition.
     */
    custom?: LedgerCustom;
    /**
     * Access control rules to define who can control or manage
     * a policy.
     */
    access?: LedgerAccess;
    /**
     * Record on which this policy is applicable.
     */
    record?: PolicyTargetRecord;
    /**
     * Action which should be taken when a schedule Policy is triggered.
     */
    action?: SchedulePolicyAction;
    /**
     * Inputs for schedule Policy action.
     */
    inputs?: SchedulePolicyInput;
    /**
     * Configuration for schedule Policy used when triggering.
     */
    config?: SchedulePolicyConfig;
    /**
     * Policy this one extends from.
     */
    extend?: LedgerHandle;
    /**
     * Policy filter
     */
    filter?: LedgerFilter;
    /**
     * Set of access rules that will be attached
     * to the record that uses this policy
     */
    values?: PolicyValues;
};
/**
 * Todo(omar): Discuss a better name for this? PolicyTargetRecord is already used for the enum
 * that represents the records a policy is applicable to.
 */
export type PolicyRecord = LedgerRecord<LedgerPolicy>;
/**
 * Access policy value is alias for existing access rule
 * They are fully compatible, but we will define type alias
 * AccessPolicyValue so that we can easily modify if we want
 * in future.
 */
export type AccessPolicyValue = LedgerAccessRule;
export type StatusPolicyValue = {
    quorum: AccessSigner[];
    status?: string | InAggregation<string>;
};
export type LabelsPolicyValue = {
    unique?: string[];
    labels: string[];
};
export type PolicyValue = AccessPolicyValue | StatusPolicyValue | LabelsPolicyValue | LayoutValue | SchedulePolicyValue;
export type PolicyValues = PolicyValue[];
export type PolicyTargetRecord = AccessRecord;
export declare enum SchedulePolicyAction {
    Create = "create"
}
/**
 * Schedule policy values that describe when the schedule should trigger.
 */
export type SchedulePolicyValue = {
    /**
     * Short description of the value.
     */
    legend: string;
    /**
     * Detailed description of the value.
     */
    detail?: string;
    /**
     * Sets the time of the day when the schedule should trigger.
     */
    cycles: SchedulePolicyCycle[];
    /**
     * Sets the days of week when the schedule should trigger.
     */
    repeat: Weekday[];
    /**
     * Sets the time period during which the schedule can trigger.
     */
    active: ScheduleActive[];
};
export type SchedulePolicyConfig = {
    timezone: string;
};
export type SchedulePolicyInput = Record<string, any>;
export type SchedulePolicyCycle = string;
export declare enum Weekday {
    Mon = "mon",
    Tue = "tue",
    Wed = "wed",
    Thu = "thu",
    Fri = "fri",
    Sat = "sat",
    Sun = "sun"
}
export type ScheduleActive = {
    starts?: string;
    closes?: string;
    legend: string;
};
