import { LedgerRecord } from '../base/ledger-record';
import { ChangeMeta } from '../common/change-meta';
import { LedgerAccess } from '../common/ledger-access';
import { LedgerCustom } from '../common/ledger-custom';
import { LedgerBaseData } from '../common/ledger-data';
import { LedgerHandle } from '../common/ledger-handle';
import { LedgerMeta, LedgerProofCustom } from '../common/ledger-meta';
import type { MergeExclusive } from 'type-fest';
/**
 * Ledger Report record
 */
export type ReportRecord = LedgerRecord<LedgerReport, ReportMeta>;
/**
 * Reports represent individual generated reports.
 */
export type LedgerReport = LedgerBaseData & {
    /**
     * A handle that uniquely identifies a report.
     */
    handle: LedgerHandle;
    /**
     * A report schema defines the report type and
     * parameters used to generate the report.
     */
    schema: LedgerHandle;
    /**
     * Custom metadata that can be stored alongside a report
     * definition.
     */
    custom?: LedgerCustom;
    /**
     * Access control rules to define who can control or manage
     * a report.
     */
    access?: LedgerAccess;
};
/**
 * Report change metadata.
 */
export type ReportChangeMeta = MergeExclusive<ChangeMeta<ReportProofCustom>, ReportMeta>;
/**
 * Report metadata.
 */
export type ReportMeta = LedgerMeta<ReportProofCustom> & {
    /**
     * Report status
     */
    status: ReportStatus;
    /**
     * Report assets
     */
    assets?: ReportAsset[];
};
export type ReportProofCustom = LedgerProofCustom<ReportProofStatus> & {
    /**
     * Assets generated by the report.
     */
    assets?: ReportAsset[];
};
/**
 * Assets generated by the report have a handle and
 * the location of the asset.
 */
export type ReportAsset = {
    handle: LedgerHandle;
    output: string;
};
/**
 * Report statuses
 */
export declare enum ReportStatus {
    Created = "created",
    Pending = "pending",
    Completed = "completed",
    Rejected = "rejected",
    Settled = "settled"
}
/**
 * Report proof statuses
 */
export type ReportProofStatus = ReportStatus;
