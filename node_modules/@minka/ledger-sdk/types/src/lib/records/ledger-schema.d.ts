import { LedgerRecord } from '../base/ledger-record';
import { LedgerAccess } from '../common/ledger-access';
import { LedgerCustom } from '../common/ledger-custom';
import { LedgerBaseData } from '../common/ledger-data';
import { LedgerHandle } from '../common/ledger-handle';
/**
 * A schema is a set of rules that define
 * how a record should be validated.
 *
 * A schema can be used to validate records
 * of an specific type. If the record type
 * has at least one schema, all records of
 * that type must be validated by at least
 * one schema.
 */
export type LedgerSchema = LedgerBaseData & {
    /**
     * Schema handler or identifier. This field is
     * used to identify schema in the system.
     */
    handle: LedgerHandle;
    /**
     * Format of this schema, this field is used
     * to identify how the validation will be applied.
     */
    format: SchemaFormat;
    /**
     * Record type that this schema will validate.
     * When there is at least one schema for a record
     * type, all records of that type must be validated
     * by at least one schema.
     */
    record: SchemaTargetRecord;
    /**
     * Actual content of the schema. This will contain
     * the set of rules and constraints used to validate
     * the record.
     */
    schema: SchemaContent;
    /**
     * Schema that this schema will extend. Meaning this
     * schema will inherit all rules and constraints from
     * the extended one.
     */
    extend?: LedgerHandle;
    /**
     * Custom metadata, this object can hold any
     * additional data.
     */
    custom?: LedgerCustom;
    /**
     * Determines access controls for the schema.
     */
    access?: LedgerAccess;
};
export type SchemaRecord = LedgerRecord<LedgerSchema>;
/**
 * Records that can be validated by using
 * the schema.
 */
export declare enum SchemaTargetRecord {
    Anchor = "anchor",
    AnchorLookup = "anchor-lookup",
    Bridge = "bridge",
    Circle = "circle",
    Domain = "domain",
    Effect = "effect",
    Intent = "intent",
    Policy = "policy",
    Report = "report",
    Signer = "signer",
    SignerFactor = "signer-factor",
    Symbol = "symbol",
    Wallet = "wallet"
}
/**
 * Schema Record values
 */
export declare const SchemaTargetRecords: SchemaTargetRecord[];
/**
 * Available schema formats.
 */
export declare enum SchemaFormat {
    JsonSchema = "json-schema"
}
/**
 * Schema Format values
 */
export declare const SchemaFormats: SchemaFormat.JsonSchema[];
/**
 * Type for the schema property of the schema record, which contains
 * the actual schema in the provided format.
 */
export type SchemaContent = Record<string, any>;
