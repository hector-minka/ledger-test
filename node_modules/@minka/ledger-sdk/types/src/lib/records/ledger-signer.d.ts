import { LedgerRecord } from '../base/ledger-record';
import { LedgerAccess } from '../common/ledger-access';
import { LedgerCustom } from '../common/ledger-custom';
import { LedgerBaseData } from '../common/ledger-data';
import { LedgerHandle } from '../common/ledger-handle';
/**
 * A signer is a ledger record that allows linking
 * signing keys with additional metadata. This can
 * be useful for recording information like additional
 * security constraints or even linking keys to external
 * records that are not necessarily managed by or stored
 * in the ledger.
 */
export type LedgerSigner = LedgerBaseData & {
    handle: LedgerHandle;
    format: LedgerKeyPair['format'];
    public: LedgerKeyPair['public'];
    secret?: LedgerKeyPair['secret'];
    schema?: LedgerHandle;
    custom?: LedgerCustom;
    access?: LedgerAccess;
};
export type SignerRecord = LedgerRecord<LedgerSigner>;
/**
 * A server signer is a signer created and owned by the ledger.
 * It could be used within internal operations signed by the ledger
 * itself that could have its authenticity verified by external agents
 * i.e ledger effects.
 *
 * It's a special type of ledger signer that allows users to create
 * signers by requesting the server to generate and manage its key pair
 * as well as hash signature.
 */
export type LedgerServerSigner = Partial<LedgerSigner>;
/**
 * Represents a cryptographic public key compatible with
 * ledger tools and libraries. Public keys are used for
 * verification of ledger requests and signatures.
 */
export type LedgerPublic = {
    /**
     * Defines the key type.
     */
    format: 'ed25519-raw' | 'rsa-der';
    /**
     * Public key for verifying ledger requests and
     * signatures.
     */
    public: string;
};
/**
 * Represents a cryptographic secret key compatible with
 * ledger tools and libraries. Secret keys are used for
 * signing of ledger requests and records.
 */
export type LedgerSecret = {
    /**
     * Defines the key type.
     */
    format: 'ed25519-raw' | 'rsa-der';
    /**
     * Secret key for signing ledger requests and
     * records.
     */
    secret: string;
};
/**
 * Represents a cryptographic key pair compatible with
 * ledger tools and libraries. Key pairs are used for
 * signing and verification of ledger requests.
 */
export type LedgerKeyPair = LedgerPublic & LedgerSecret;
/**
 * Input parameters for signing ledger records. A key pair is
 * required to generate a signature, other parameters are optional
 * metadata that can be attached along with the signature.
 */
export type LedgerSigningParams<TCustom extends LedgerCustom = LedgerCustom> = {
    /**
     * Key pair to use for signing.
     */
    keyPair: LedgerKeyPair;
    /**
     * Additional data to include with the signature.
     */
    custom?: TCustom;
};
