import { LedgerAccess } from '../common/ledger-access';
import { LedgerCustom } from '../common/ledger-custom';
import { LedgerBaseData } from '../common/ledger-data';
import { LedgerHandle } from '../common/ledger-handle';
/**
 * A symbol record identifies a unit of exchange. Each
 * ledger balance has an amount and a symbol that this
 * amount represents. Symbols can identify currencies,
 * loyalty points, or any other concept that can be
 * counted. Whoever controls a symbol also controls the
 * supply of that symbol in the ledger, i.e., owner of
 * a symbol can issue unlimited amounts of a symbol.
 *
 * While the owner controls issuance, the circulation
 * of a symbol is controlled by those who hold balances
 * of said symbol. This means that once you send a
 * specific balance to someone, you cannot control it
 * anymore, regardless if you own the symbol or not.
 */
export type LedgerSymbol = LedgerBaseData & {
    /**
     * Symbol handle or identifier, handle is used to
     * identify a symbol in each intent, balance query,
     * and other operations involving a symbol.
     */
    handle: LedgerHandle;
    /**
     * Symbol factor, used to define divisor which is
     * applied to represent symbol amount to user.
     * Since all amounts and balances are expressed as
     * integers in ledger records, all currency amounts
     * will be expressed as number of smallest units of
     * balance. For example, since cents are smallest unit
     * of balance for USD, the symbol for USD will have
     * factor equal to 100 so the amount 12.34 USD will
     * have integer value 1234 in ledger record.
     */
    factor: SymbolFactor;
    /**
     * The schema used to validate this symbol. This is mandatory
     * if there is at least one schema defined for the record
     * type `symbol`.
     */
    schema?: LedgerHandle;
    /**
     * Custom metadata, this object can hold any
     * additional data that could be useful to end users
     * or ledger plugins to work with the symbol.
     */
    custom?: LedgerCustom;
    /**
     * Determines access controls of a symbol. This field
     * can be used to limit updates, issuance, etc.
     */
    access?: LedgerAccess;
};
/**
 * Factor used to divide symbol amount. Only
 * powers of 10.
 */
export type SymbolFactor = 1 | 10 | 100 | 1000 | 10000 | 100000 | 1000000 | 10000000 | 100000000 | 1000000000 | 10000000000 | 100000000000 | 1000000000000 | 10000000000000 | 100000000000000 | 1000000000000000;
/**
 * Symbol factor values
 */
export declare const SymbolFactors: number[];
