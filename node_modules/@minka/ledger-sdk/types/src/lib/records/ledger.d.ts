import { LedgerAccess } from '../common/ledger-access';
import { LedgerCustom } from '../common/ledger-custom';
import { LedgerBaseData } from '../common/ledger-data';
import { LedgerHandle } from '../common/ledger-handle';
/**
 * Ledger instances are records that hold information about
 * existing instances of ledger running in a server. Each
 * instance has a unique handle that identifies it.
 *
 * A ledger instance record is responsible for defining
 * the configuration and other useful metadata about a ledger,
 * such as access control constraints, server signer, etc.
 */
export type Ledger = LedgerBaseData & {
    /**
     * Ledger instance handle or identifier, handle is used to
     * identify an instance.
     */
    handle: LedgerHandle;
    /**
     * Custom metadata, this object can hold any additional
     * data that could be useful to end users or ledger
     * plugins to work with ledger instances.
     */
    custom?: LedgerCustom;
    /**
     * Ledger server signer, used to define signer which is
     * used to sign transactions and operations owned by
     * the ledger, i.e effects.
     *
     * The end user can use the public key of this signer
     * to proof-of-authencity of transactions performed
     * by the ledger
     */
    signer?: LedgerHandle;
    /**
     * Determines access controls. This field can be used to
     * constraint API operations to specific signers, public keys,
     * etc.
     */
    access: LedgerAccess;
    /**
     * Ledger config object that contains common configuration options.
     */
    config?: LedgerConfig;
};
export declare enum LedgerConfigKey {
    IntentExpiryThresholdMinutes = "intent.expiryThresholdMinutes",
    IntentExpiryThresholdMinutesDeprecated = "intentExpiryThresholdMinutes",
    IntentCreditorInitiatedTransfersEnabled = "intent.creditorInitiatedTransfersEnabled",
    DomainResolutionFromHandleEnabled = "domain.resolutionFromHandleEnabled",
    AnchorWalletRequired = "anchor.walletRequired",
    PolicyScheduleProcessorEnabled = "policy.scheduleProcessorEnabled",
    TrapsEnabled = "traps.enabled",
    RequestJournalingEnabled = "request.journalingEnabled",
    ForwardAnchorCreate = "forward.anchor.create",
    ForwardAnchorUpdate = "forward.anchor.update",
    ForwardAnchorDrop = "forward.anchor.drop",
    ForwardAnchorGet = "forward.anchor.get",
    ForwardAnchorSign = "forward.anchor.sign",
    ForwardAnchorFindAll = "forward.anchor.findAll",
    AggregatedLimitsEnabled = "limits.aggregated.enabled",
    AuthenticationTwoFactorEnabled = "authentication.twoFactor.enabled"
}
/**
 * Ledger config object that contains common configuration options.
 */
export type LedgerConfig = {
    /**
     * Flag that controls whether the ledger will support extracting the domain of a record from its handle.
     * If set to true, the ledger will support extracting the domain of a record from its handle.
     * Otherwise, the ledger will only support determining the domain of a record from proofs.
     */
    [LedgerConfigKey.DomainResolutionFromHandleEnabled]?: boolean;
    /**
     * Threshold for intent expiry in minutes. Intents that have not
     * finished processing in the specified amount of time will be
     * expired and as a consequence the entire corresponding thread
     * will be aborted.
     */
    [LedgerConfigKey.IntentExpiryThresholdMinutes]: number;
    /**
     * Flag that controls whether third party initiated intents are allowed.
     * If set to true, third party initiated intents will be enabled, as intents will not be
     * checked against spend wallet rule until we get debit prepare confirmation first.
     * Default value is 'false', meaning that third party initiated intents are disabled.
     */
    [LedgerConfigKey.IntentCreditorInitiatedTransfersEnabled]?: boolean;
    /**
     * Defines whether a wallet must exist or
     * not as a constraint to create an anchor.
     * This flag is also checked when dropping
     * an anchor in order to forbid the deletion
     * if the anchor wallet is a real wallet
     * in the system.
     * Default value is 'true'.
     */
    [LedgerConfigKey.AnchorWalletRequired]?: boolean;
    /**
     * Flag that controls the Ledger schedule policy feature. If set to true
     * the schedule policy processor will be turned on and process schedule
     * policies.
     */
    [LedgerConfigKey.PolicyScheduleProcessorEnabled]?: boolean;
    /**
     * Flag that controls if Ledger traps are enabled.
     * Note this depend on the server having this feature enabled as well.
     * By default traps are disabled.
     */
    [LedgerConfigKey.TrapsEnabled]?: boolean;
    /**
     * Flag that enables journaling of requests for both incoming and outgoing
     * requests. This depends on the server configuration to allow journaling
     * as well.
     */
    [LedgerConfigKey.RequestJournalingEnabled]?: boolean;
    /**
     * Forwarding URL for creating anchors. If set, the ledger will
     * forward calls to create anchors to the specified Bridge.
     *
     * The bridge has to handle the request just like the ledger would.
     * The body returned in response, however, will be discarded.
     */
    [LedgerConfigKey.ForwardAnchorCreate]?: LedgerHandle;
    /**
     * Forwarding URL for updating anchors. If set, the ledger will
     * forward calls to create anchors to the specified Bridge.
     *
     * The bridge has to handle the request just like the ledger would.
     * The body returned in response, however, will be discarded.
     */
    [LedgerConfigKey.ForwardAnchorUpdate]?: LedgerHandle;
    /**
     * Forwarding URL for dropping anchors. If set, the ledger will
     * forward calls to create anchors to the specified Bridge.
     *
     * The bridge has to handle the request just like the ledger would.
     * The body returned in response, however, will be discarded.
     */
    [LedgerConfigKey.ForwardAnchorDrop]?: LedgerHandle;
    /**
     * Forwarding URL for getting an anchor. If set, the ledger will
     * first check its own DB for the anchor. If it does not exist there,
     * it will forward the call to the specified Bridge.
     *
     * The bridge has to handle the request just like the ledger would.
     * The body returned in response, however, will be discarded.
     */
    [LedgerConfigKey.ForwardAnchorGet]?: LedgerHandle;
    /**
     * Forwarding URL for signing anchors. If set, the ledger will
     * forward calls to sign an anchor to the specified Bridge.
     *
     * The bridge has to handle the request just like the ledger would.
     * The body returned in response, however, will be discarded.
     */
    [LedgerConfigKey.ForwardAnchorSign]?: LedgerHandle;
    /**
     * Forwarding URL for finding anchors. If set, the ledger will
     * forward calls to find anchors to the specified Bridge.
     *
     * The bridge has to handle the request just like the ledger would.
     * The body returned in response from the bridge will be signed and returned by the ledger.
     */
    [LedgerConfigKey.ForwardAnchorFindAll]?: LedgerHandle;
    /**
     * Flag that controls whether the ledger will support aggregated limits.
     * By default false.
     */
    [LedgerConfigKey.AggregatedLimitsEnabled]?: boolean;
};
